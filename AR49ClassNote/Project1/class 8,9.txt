/////////////////////// 23.8.18



layout은 buffer와 shader가 있으면 만들수 있게했다.


23. 8. 21

선생님의 worldviewprojection을 곱하면 대부분 w 값이 이상함 w나눠줘야 투영행렬이 완료됨.
w나눠야 좌표가 -1~1사이 값이된다. 직접곱해봐라


투영행렬에서 w값에 변형되기 전의 z값을 보존하기위해 행렬의 형태가

0000
0000
0001
0000

1이 저기에 있는 이유임. 즉, z값을 보존하기 위해 w공간을 빌릴 수 밖에 없음 (z값 공간은 또 z좌표를 0~1로 바꿔줘야하는 식을 넣어줘야하니까 w공간을 빌릴수밖에 없움)

w로 나눈다는게 사실은 0~1사이의 좌표값으로 바뀌기 전의 z를 나누는 것(변형되기 전의 z좌표값을 나누는것)과 같은것임


*레스터라이저 옵션 
 <1> fillmode (1) sold  - 영역전체를 칠함
              (2) wireframe - 영역테두리만 칠함
 <2> cullmode (1) cull_back - 외적했는데 z방향이 앞쪽인 픽셀들은 안건져냄
                1) cull_none - 앞뒤 신경쓰지말고 픽셀다 건져내라 (건져내다 == 색칠 칠해질 픽셀영역을 지정한다)
                2) cull_front - 앞쪽 픽셀들만 건져내라
 <3> DepthClipEnable - -1 ~ 1 좌표 밖에 있는 픽셀들을 건져낼건지 아닌지 (ture == 밖에 있는 것도 그려라)

 ## 투영행렬까지 곱했을때 -1 ~ 1 좌표 밖에 있는 픽셀들을 스크린 밖에 있어서 보이지 않을뿐 엄연히 좌표상 존재한다 
 ## 뷰포트 여러개 넣어줄수 있는데 그건 아웃풋머저떄문. 나중에 알려준다함
 
 ## 픽셀쉐이더는 레스터라이저에서 건져진 픽셀들을 어떻게 출력할지 설정

 ?? 버텍스컬러쉐이더와 픽셀컬러쉐이더는 어떤차이?

  ## 화면에 이미지 띄우는 법 - 스왑체인에서 얻어낸 텍스처에서 얻은 랜더타켓(권한)에 그려야 화면에 그려진다.
  ## renderstart에서 렌더타켓 세팅하는이유 - 한번세팅하면 바꾸지않으니까 굳이 바꿀필요가 없으니까
                                             원래 과정대로라면 픽셀 쉐이더 끝나고 하는게 정석이긴함 근데 의미없음



  //////////////////////////////////////////////// 23. 8. 22



 drawindexed() - 렌더링파이프라인에서 setting한 모든 사전작업들을 바탕으로 화면에 vertex를 그린다.
  인자 1) 세팅한 인덱스 몇개쓸건가
  인자 2) 몇번째 인덱스 세팅부터 쓸건가

  ##렌더링대상뷰 == 백버퍼타켓
  ##매쉬의 범위 내에서만 그리기 조절가능
  ##렌더러에서 들고있는 월드뷰프로젝션 매트릭스를 버텍스 쉐이더에 전달해야 원하는 위치로 화면에 그려짐

  ## 쉐이더 하나당 CPU에서 그래픽 카드로 전달할 수 있는 데이터의 개수는 정해져있음 (14개 등 그래픽카드마다 다른듯) 이것을 슬롯이라고한다.
  ## 상수버퍼에 쓰일 transformdata는 쉐이더 마다 따로 복붙해서 만들지 말고 하나만 만들고 돌려쓰자 어차피 같은 데이터이므로(다른 fx 파일들이 include 하면됨)


 상수버퍼세팅
  ##usage_dynamic - 그래픽카드에서 데이터를 바꿀 수 있다.
  ##createbuffer() - 상수버퍼 초기값(두번쨰인자) 가 0인이유- cpu가 계속 값 넣어주니까 얜 초기값 필요없음



  ///////////////////////////////////////////////////  23. 8 .23



  * 상수버퍼 사용 원리
  ## 각 쉐이더가 동일한 데이터구조(transformdata)를 사용하므로, 크기가 같은 상수버퍼는 쉐이더마다 따로만들지 말고 공유하는 자료구조를 만든게 이 엔진이다.
  ## Map 안에 map 이있는 자료구조인 이유는, key가 2개 필요하기 때문이다. 

   * 이 엔진에서는 텍스처가 일을 하지 않고 텍스처는 그냥 이미지 원본만 가지는 역할만 한다.
   ## 대신 sprite 가 이미지(텍스처)를 가지고, 이미지를 자르는 등 여러 작업을 한다.

   gameEngineSptrite

   CreateFoler() -> 폴더안에있는 모든 파일(이미지)을 스프라이트로 만든다.
   CreateCut() -> 하나의 이미지를 잘라서 스프라이트로 만든다.

   @@ SpriterRenderer는 Renderer를 상속하고, Renderer(부모한테)가 대부분의 일을 하지만 Renderer가 일할때 쓸 데이터를 조금 가공하는 방식이다.
   굳이 이렇게 구조를 짠 이유는 세팅과 그리다의 단계를 나누고 싶어서그렇다. (SpriteRenderer가 세팅에 더 집중, Renderer가 그리다에 더 집중)
   그럼 왜 나누는가? Renderer는 뭐든지 그릴 수있는데 이 말은 곧 그릴때마다 세팅을 일일히 해야한다. 뭐에 특화되어 있지 않기떄문.
   내가 하는 작업은 그냥 화면에 그림하나 띄우는건데 그럴때마다 일일히 쉐이터 버텍스 레스터라이징 세팅하는게 너무 귀찮다. 
   그냥 인터페이스 하나 두고 자식클래스에서 그걸로 호출하면 알아서 세팅하고 부모렌더러가 렌더해주는 구조를 만들고싶은것.

   SpriteRenderer는 이미지 1장을 띄우는데 특화된 클래스입니다.
   이외에 특화된 기능을 만들고싶다면 Renderer상속해서 새로운 클래스를 만들면 되지만 선생님한테 얘기해서 만들어달라해라.

  * 텍스처로드 라이브러리 가져오기
@@ 이 프로젝트에는 무슨 서드파티(라이브러리)를 썼는지 기억하고 있어야한다. 
@@ GameEngineCore에 텍스처 로드를 더 쉽게해줄 마소의 라이브러리를 가져온다.
@@  GameEngineCore -> ThirdParty -> DirectXTex -> lib, inc 파일 만들기
    lib 파일 안에는 Debug와 Release파일 있어야함.
    inc 파일 안에는 h와 ini 파일이 있어야함. 


DirectX 텍스처 로딩을 위한 라이브러리를 다운받고 파일중에 ilb, pdb 파일만 남기고 다 삭제하라. pdb 파일은 기호를 알수없다고 빌드가 안되기 때문에 남겨두는것. 선생님이 자세히 알려주진 않으심
라이브러리파일 4개 (lib, pdb) 모두 빌드에서 제외 예, 항목형식은 라이브러리로 설정
헤더파일에 관련된 2개는 설정 안해줘도 됨.

## 탐색기에서 세팅 완료된모습
    [GameEngineCore]
     [ThirdParty]
      [Inc]
        >DirectXTex .h
        >DirectXTex.inl
      [Debug]
        >DirectXTex.lib
        >DirectXTex.pdb
      [Release]
        >DirectXTex.lib
        >DirectXTex.pdb
      


///////////////////////////////////////////////////// 23. 8 .24



* GameEngineTexture
 랜더타겟과 쉐이더타겟이 분리되어있다. 렌더타켓은 그릴수 있는권한, 쉐이더타겟은 쉐이더 설정을 바꿀권한이다.

* GameEngineTexture에서 텍스처를 로드할때 확장자가 DDS, 인경우 -???

  Image.GetImageCount() - gif 파일처럼 이미지가 겹쳐있는 경우가 있다. 
  VSSetShaderResources() 
   인자 1) Slot. 쉐이더 fx파일에서 함수인자의 t0에 해당. t 뒤에있는 숫자와 Slot의 숫자가 동일해야함. 잘못쓰면 터짐. (주의 - 상수버퍼와 메모리를 공유하지 않는 별개의 공간임)
   인자 2) 세팅할 쉐이더 리소스 개수 

* fx파일에서 사용하는 메모리 공간에 약자 b, t, s가 있는데 각각 버퍼 텍스처 쉐이더이다.
* 샘플러를 사용하는 이유 - 화면에 그려질 픽셀영역과 텍스처 크기는 다른경우가 대부분인데 이걸 알맞게 정해주는 수식을 따로 만들어야 화면에 제대로 그려질것임.
                           그게 귀찮아서 샘플러를 사용한다. 샘플러가 알아서 텍스처 비율에 맞게 픽셀영역에 가져오도록 계산해준다.

   ## 각 쉐이더 마다 샘플러는 따로 가질수 있음 그래서 레스터라이저와 코드가 비슷하지만 세팅은 VSSetting PSSetting 으로 나눠서 구현된다.
      
* GameEngineDeviceResources -> SAMPLER_DESC 의 Filter -> 최단입점처럼 텍스처를 그리는 샘플링 방식을 말하는듯
* MipMap - 텍스처 로드할떄 크기를 여러개 만들어 놓는 것. 몇개만들지는 Direct가 알아서 하겠지. MIN 이 아마 가장 작은 텍스처, MAG 가 중간크기, MIP이 최대로 큰 텍스처를 말하는듯?
* _MIN_MAG_MIP_LINEAR -> 색이 겹치는 픽셀은 색을 중간색으로 뭉갠다
  _MIN_MAG_MIP_LINEAR -> 최단입점으로 세팅

  ## 색상을 가져오는 공식의 기본개념은 픽셀영역과 텍스처의 전체크기를  0~1로 놔두고 그 영역비율에 맞춰 색을 가져오는 것이다.
     다이렉트X에게 샘플링 전체 영역의 범위와 기준을 알려주면 쉐이더에 알아서 알맞은 계산결과값을 던져주고 쉐이더가 그걸 바탕으로 그 픽셀에 그 텍스쳐영역의 색깔을 그려준다. 
     그걸 버텍스버퍼에서 알려준다. 즉 버텍스버퍼 세팅할때 미리 샘플링 기준을 지정해줘야함




///////////////////////////////////////////////////  23. 8 .28


* GameEngineSprite 

 ## CreateSingle()은 그냥 이미지 한장 가져오는 함수 이거 쓰다가 불편하니까 나중에 고쳐달라하면됨
 ## emplace_back() - 생성자로 만들고 push -> 나중에 설명함


 * textureshader.fx
   float4 TextureShader_PS(float4 pos : SV_Position) : SV_Target0 함수

 ## float4 Color = DiffuseTex.Sample(Sampler, float2(0, 0)); -> 텍스처의 float2(0,0) 좌표의 색깔을 가져온 색깔
    float4 Color = DiffuseTex.Sample(Sampler, _input.TEXCOORD.xy 또는 xz); -> 스위즐링 문법. 검색해보자
    POSITION은 레스터라이저에서 건져낼 픽셀위치임을 명심하자. ->맞나?
    TEXCOORD는 샘플링에서 쓸 가로세로 비율값임을 명심하자.

 * Sampler 값은 U,V,W 가 있다. U는 가로길이, V는 세로길이, W는 겹쳐진 텍스쳐 갯수. W는 쓸일이 없을것임.

 * Vertex버퍼에서 정보를 많이 만들어놔도 쉐이더에선 굳이 다 그 데이터들을 쓸필요가 없다. 

 * TEXTCOORD 와 UV는 똒같은말이다




//////////////////////////////////////// 23. 8. 29


 
 ## 하나의 Texture를 Sprite로 자를땐 이미지 개수만큼 영역이 나눠지므로 그것에 비례하는 UV값의 상대적인값 (0~1 사이의 값)을 가지고 쉐이더가 처리해야 이미지를 자를 수 있다.
    만약 한 이미지를 6 * 6 으로 Sprite로 만든다고 하면, 맨 처음 이미지의 X, Y UV크기는 당연히 1.0 / 6.0 이다. 첫번째 이미지의 UV 좌표값은 X = 0, Y = 0이다.
    그렇다면 6번째 이미지의 UV 좌표값은 무엇일까? X는 (1/6) * 5 이고 Y는 (1/6) * 0 이다. 즉 UV 크기값에다 적절한 인덱스를 곱하면 된다.

 ## 앞으로 CPU에서 상수버퍼로 하나의 스프라이트 이미지의 UV의 값을 계속 바꾸면서 쉐이더에 전달하면 애니메이션이 나올것이다. 
 ## floa4 클래스에 Sprite 자를 UV 정보를 가진 구조체를 하나 만든다. Pos2DX, Scale2DX 등 
 ## SpriteData 클래스 에서 SpritePivot 변수가 그 정보를 지닌다.



 /////////////////////////////////////////  23. 8. 30
 


  ## Vertex 수치가 렌더링파이프라인을 통해서 버텍스의 실제수치가 어떻게 변화하는가
     * 질문할때는 항상 수치를 이야기하라. ex) 어떤 단계에서 왜 이런 결과값이 나오나요
     0. Vertex 크기가 0.5라고 하자
     1. inputAssembler 단계에서 여전히 0.5
     2. Vettex Shader 단계에서 WorldviewProjection을 곱한 수치가 나온다. <- 실제로 수치를 곱해서 확인해봐야한다.
       - wolrd를 곱해주면 x y 좌표값이 훨씬 커지는게 보통이다. 
       - view를 곱하면 수치가 거기서 더 조금 변한다. 
       - projection을 곱하면 여전히 x y 값은 크고 w값에 z값이 저장되어 있다. 
         - Z값을 나눠주기 전까지 -1~1 사이의 값이 절대 안나온다. 그거보다 크게나온다.
     4. 레스터라이저의 homogenous division 으로 z값(w 위치에 저장되어있는)을 나누면 좌표가 -1~1 사이값이 된다 
     5. 이제 해상도에 맞는 뷰포트값을 곱하면 윈도우 크기만큼 커진다. 
     6. 레스터라이저에서 나온 결과 영역을 픽쉘 쉐이더에 넘긴다. 



//////////////////////////////////////////  23. 9. 1



이미지 프레임 그대로 애니메이션 인덱스 검사 (IsEnd)

## setFrameEvent - 이 애니메이션의 이프레임으로 변경해주어라




/////////////////////////////////////// 23. 9. 4



## 엔진에 있는 모든 자료구조를 어디에서 왜썼는지 알아야합니다 
## Death는 엔진쪽 컴포넌트만 확실히 알아서 지워줌 content에서 엔진쪽 class를 상속한 녀석들은 알아서 메모리 관리를 해줘야함
## 언리얼 포함 엔진에서 Actor 삭제시 렌더러 콜리전 다 동시삭제( 렌더러만 삭제하는 경우는 겨의 없다 )



/////////////////////////////////////////// 23. 9. 5



 ## renderer는 자신이 속할 camera order와 내부에서 render order 두가지 필요
    renderer에 특별히 카메라를 지정해주지 않으면 일단 0번카메라에 지정된다. 그래야 일단 렌더가 되기때문

 ## renderer를 보는 camera가 여러개일 수있다 -> 오직 카메라 하나만 아는 것으로 변경. 이유 : renderer를 아는 camera가여러개일 필요가 없음 그냥 renderer를 새로 만들어서 그 카메라에 할당하면됨
 ## setviewcameraselet() 에서 만약 어떤 카메라가 renderer를 이미 가진 상황이면 remove 해주고 소속 카메라를 바꾸는 것으로변경   

 ## 이 엔진의 구조는 Actor는 위치와 기준을 정해주는 역할만하고 실제 크기는 renderer의 크기를 바꾸는 것을 지향한다. 이유: actor에 붙어있는 여러 compounent까지 관리하는게 더 귀찮아서 

 ## AABB 고정 사각형 충돌방식
 ## OBB 기울어진 사각형 충돌방식
 ## sphere 충돌보다 obb가 50 60배 느림

 ## 충돌에서 x y z 축 행렬로 회전하는 행렬을 따로 구하는 함수가 따로 있음 
 ## world는 쉽다 world 행렬에서 4번쨰 벡터를 가져오면 됨. 
 ## decompose 행렬에서 스케일 회전 포지션을 분해해준다.



 //////////////////////// 23. 9. 6



 GameEngineMath.h
 - Decompose();
 - 분해해서 나오는 회전행렬 결과값은 정량된 값이 아니라 무작위 이다, 예를 들어 45도 회전시키는 행렬은 405도, -315도 역시 가능하다. 어쩄든 45도같이 회전된 형태의 결과만 같게 신경쓴다.
   그래서 내가 딱! 정확한 수치의 45도 회전시키는 행렬을 알고싶다면 다른 방법을 찾아야한다.
 - 각 인자 XMVector -> 레퍼런스로 달라는거보니 주소값주면 거기에 결과값 넣어서 돌려주겠다는 뜻이다.
 
 * 짐벌락 - 축이 꼬이는 것? 공부해둬라
            일단 내가 파악한것 - X축 이동후 Y를 90도로 이동하고, Z축을 움직이면 물체는 Z축으로 움직이지 않게 된다! 이유는 Z축을 움직이는 순간에 물체는 Z축이 X축이 되어있다.
            다시 말해보면 xyz 축은 항상 고정되어 있다 그런데 물체가 XY 축을 이동할때 XYZ축이 따라오지 않고 항상 월드축은 고정되어 있으므로 분명 어느 축으로 회전하라고 했는데
            의도치 않은 축으로 회전하게 되는 것이다. 

            방금전 상황에서 y축으로 90도 회전한 상태를 보자. 이때 Z축회전을 명령한다면 프로그램은 월드 기준으로 물체를 Z축 회전시킬 것이다. 하지만 물체 입장에선 하늘을 바라보고 있는 상황인데
            이떄 월드의 Z축은 물체입장에선 X축이 되는 것이다! 이렇게 회전을 XYZ 순차적으로 실시할때 월드의 축이 물체와 함께 이동하지 않아서 생기는 교란이 바로 짐벌락이다.
            추가) 위 예시는 잘못됨 감은 잡은거 같은데 예시가 잘못됨 정확한 예시가 필요함
            

 - 사원수 행렬을 쓰면 징벌락이 일어나지도 않고 회전행렬을 더 간단한 형태로 계산할 수 있다. 일반적인 3x3 회전행렬 3개를 곱하는게 너무 비효율적이여서 약식으로 계산하기 위해 만든 공식이다.
   엔진 만들 때마다 수학공식 새로 만드는 것보다 그냥 이걸 쓰는게 더 낫다는 의미

 - float4가 쿼터니온의 개념도 포함할 수있는 자료형이다. 

 - GameEngineTransform.h 의 DirectX::BoundingOrientedBox OBB; 에서 XMFLOAT4 Orientation; 이
   float3이 아니라 float4인 이유는 쿼터니온 까지 포함하므로 4개가 필요한것. x y z 축 회전이니까 3개만 필요할거 같은데 그렇지 않다

 ** transform 이 collisiondata를 들고 있는게 타당해보임 collision도 위치와 영역의 개념이기 때문에
    하지만 충돌체는 아니다 충돌중 충돌 후 처리 등은 transform에서 못함



////////////////////////// 23. 9. 7




 ## Collision의 Order는 본인이 몬스터인지 총알인지 등 자신의 그룹을 나타냄
 ## Collision 관리를 Level이 직접 할지, Manager를 새로 만들지 선택에서 Manager를 만들기로 함 - class GameEngineCollisionGroup 
   (** 충돌체만들면서 지난시간 transform으로 충돌체크 하는 소스코드는 주석처리됨)
    - Level이 CollisionGroup을 여러개 가질수 있고, 그 CollisionGroup 안에 Collsion 객체를 여러개 가질 수 있는 구조.
    - PushCollision() - 콜리전 스마트포인터 하나를 CollisionGroup에 넣는다
 
 ## 충돌한 Collision들의 스마트포인터들을 벡터자료구조 로 받는다
    * Collision 객체
     - Collision(int _Order) -> 내 콜리전이 Collision함수를 호출하면 내 현재위치와 해당 콜리전그룹이 충돌했는지 결과반환 
     - Collision(int _Order, float4 _Pos) ->                         내 다음위치와 해당 콜리전그룹이 충돌하는지 결과반환. 

 ## Collision Type은 직접 설정해야함. 초기타입은 구(sphere).

 ## CollisionGroup의 Collision 함수가 Transform의 Collision 함수를 이용한다. 이름이 같음 
 
 (** trnasform.h에서 CollisionParameter class가 가진 두 GameEngineTransform&가 너무 커서 CollisionData&로 바꿨다. 그래서 transform.cpp에 있는충돌함수 코드가 모두 살짝 바뀜 논리는 똑같다)

   - 어느 그룹과 충돌한 사실만 알고 싶은게 아니라 충돌한 대상들의 실체 까지 알고싶다 
     -> Collision class에서 Collision() 오버로드 함수들 중에 인자중에 람다를 쓰는 함수가 있다.
       - 지역 static으로 vector를 쓴다. list는 클리어하면 노드가 싹다 날아가지만 vector는 그냥 인덱스가 0이 될 뿐이다(메모리관리기법)
       - 그 static vector의 size가 0이 아니면 뭔가 내 충돌체와 충돌한 콜리전이 있는것 이므로, 람다함수의 인자로 그 콜리전의 포인터를 넣어줌
       - 람다함수를 쓴 Collision은 사실 return값이 불필요하다 람다함수의 호출여부를 파악하는 것만으로도 이미 원하는 목적(나와 충돌한 충돌체들이 있는지확인)이 달성된것이기때문

   - player 객체의 update 에서 충돌했을경우의 충돌체의 부모 객체는 무조건 Actor라는 확신이 있으므로 GetParentObject가 아닌 GetActor를 사용한다.  (우선은)
     (** 중요) collision 상황시 거쳐야하는 단계가 없다고 하셨음 언제든지 충돌체 처리를하라. player 클래스 update의 충돌체 처리 시 람다쓴 코드를 잘 볼것)

   - 충돌체는 생성 삭제가 빈번하게 발행하므로, Collision그룹에서 AllreleaeCheck() 할때 ranged for문은 힘들다

 ## CollisionEvent() - 충돌체가 처음충돌할떄, 충돌중, 충돌종료시에 뭘 할건지.
    - 그냥 충돌여부만 체크하는 Collision()과 달리 CollisionEvent()는 거기에 충돌의 상황까지 체크하는 차이가 있는 것임. 
    - 그렇다면 어떻게 충돌상황까지 알수 있는가? 충돌상태를 저장하는 변수를 하나 둘 수 밖에없다. 그것을 set(Value 없는 map) 자료구조로 Collision이 들게한다.
    - set의 key값은 포인터로 한다. 포인터값은 (서로 다른 객체라면)절대 겹칠수 없으므로 정말 적절한 key이다
    - CollisionEvent() 코드의 흐름순서는, 충돌을 아예안함, 충돌을 안했는데 전에 충돌했었음, 충돌을 했는데 처음충돌함, 충돌을 했는데 이전에 충돌한적있음 이 순서를 기억하고 코드를 분석해볼것

  (참고 - 충돌 후 충돌한걸 death 해도 set에 key 주소값이 남아 있다. 해결법? 1. 충돌한 당사자끼리 서로 알게하고 서로 release함 - 다음주에 계속)



  /////////////////////////////////////////// 23. 9. 08



  - collision 구조에서 충돌체가 왜 서로를 알고 있어야 하는가? 
    그럼 서로 모르면 어떻게 되는가? 한쪽만 알고있다고 해보자.
    충돌체A와 B가 있을때 충돌체 A만 B를 알고 있을 경우,
    충돌체A가 B랑 충돌했을떄 B를 Death() 시킨다고 하자.
     
    그렇다면 충돌체 A는 B의 정보를 여전히 들고있다. 그냥 Death()한다고 B정보가 저절로 release되는게 아니다.
    Death()할때 B정보를 release()하는 작업을 A보고 하라고 하면(엔진프로그래머가 아닌 컨텐츠프로그래머가 할일이 많아지면) 그런 엔진은 아무도 안쓴다. 
    사용자 입장에서는 death()하면 A충돌체는 알아서 B정보를 release 도해서 데이터누수가 없길 바랄것이다.

    이것을 해결하는 방법이 바로 충돌체가 서로 아는 것이다.
    B스스로가 충돌한 다른 충돌체의 정보(충돌체A 등등)를 알고있다면, 본인이 Death()할때 본인을 알고있는 충돌체들에게 자신의 정보를 삭제하라고 지시하면 되는것이다. 

    이 논리에 어떤 의문점있는지 한번쯤은 생각해봐야함 선생님이 그냥 그렇다고했으니까 받아들임

   - 충돌체가 Death()하는 상황과 Exit (충돌중 상태에서 -> 충돌종료 상태가 되는 순간) 는 엄연히 다른 상황이다. (그렇게 개념을 맞추자고 선생님이 말씀하심)


## CreateChild() 함수는 어떤 함수인가 - 누가 피봇기능을 넣어달라고 만드는 거라했는데 잘모르겠다..
   - 이제 transform을 2중으로 가지게 된다. 예를들어 renderer라는 component는 원래 자기 고유의 transform과, 이미지가 따로 가지고 있는 transform 두개를 가지는 것이다.
   - 이미지랑 transform을 동일시하는게 아니라 따로 분리해 놓는다. 즉 transform의 크기와 실제 이미지의 크기는 호환될수도있으나 아닐수도있다.

   - ?? 그래서 Scale을 imagetransform이 가져야한다 가 무슨말인지 정확한 이해가 안됬다 실제 scale은 신경안쓰겠다는 건지 아니면 image만 따로 scale을 어떻게 하겠다는 건지..
   - 이제 크기를 직접바꾸면 안된다고한다. transform의 scale을 바꾼다고 내 의도에 알맞게 scale이 바뀌지 않고 imagetransform의 scale을 바꿔야 크기가 조절된다. 
   
   - 언듯 이해하기로, transform은 항상 크기가 (1,1) 고정이고 (2,2) (3,3) 이렇게 바꾸면 크기가 2배3배 되는 개념으로 변한다고 한다 
     이건 한번 테스트가 필요하다 imagetransform은 그대로인데 transform의 값이 변하면 어떻게 되는지..


## 이제 Setimagescale(), AddImageScale(), AddLocalScale() 이라는 함수가 생겼다..



/////////////////////////////////////// 23. 9 .11



충돌체가 서로 알게하려다가 구조 바꿈
매 프레임마다 한번씩 모든충돌체를 돌면서 업데이트 하기 싫어서 서로 알게 함



/////////////////////////////////////////23. 9.12



 ## blender는 레스터라이저를 그대로 베껴오고 살짝 수정한다. setting작업이기 때문에 코드 비슷할수밖에 없음

 ## 블랜드 공식
   - (SrcColor) * (SrcFactor) (Op) (DestColor) * (DestFactor)
   - op는 옵션. 연산자.

 ## Desc.IndependentBlendEnable = false 면 랜덤타겟 8개를 따로 세팅해줄 필요없이 0번째 설정이 나머지 1~7 랜덤타겟에 알아서 적용됨
    코드보면 알겠지면 랜덤파겟 8개 다 설정해주려면 노가다 작업이고, 그리고 랜덤타겟 8개 겹쳐서 블랜드 기술을 적용시킬 작업이 현재는 필요없음 나중에 어디서 필요한지 알게될것이다.
 ## 한 랜덤타켓에 어느색깔은 블랜드 기술 적용하고, 나머지 색깔은 블랜드 적용안하고 이렇게 따로따로 설정하는건 안만들겠다 필요한지도 모르겠따. 그냥 색깔 전체가 블랜드 할건지 안할건지 딱 두가지다.
 
 ## 옵션 설명
   - SrcBlend - 내 색깔에 곱해지는 알파값. 즉 Src팩터
   - DestBlend - 상대의 알파값. 그 값은 (1-SrcBlend). 즉 1을 두고 SrcBlend와 DestBlend가 치킨게임 하는것



////////////////////////////////////// 23. 9. 18



 ## 역행렬 개념을 이용해서 마우스 커서의 위치를 구한다. 뷰포트->투영->뷰 스페이스 -> 월드 


 ## 쉐이더 자동화란? 쉐이더 사용시 상수버퍼, 샘플러, 텍스처 등등를 직접 적어주어야하는 경우가 많은데 이걸 자동으로 해주게하겠다. 세팅의 이름을 두어서
    세팅 이름만 기억해두면 그 세팅 이름대로 설정. 만약 세이더 자동화를 하지 않는다면 일일히 그런설정들을 다 내버려둔다. `캐릭이 많아질수록  세팅비용 증가 
    )리플렉션)



/////////////////////////////////////////// 23. 9. 19



## transformdata에서 localscale, rotation, quaternion, position 그리고 world~~ 등등은 값 확인용으로 직접 값을 변경하는 경우는 없다. decompose로만 값을 가져온다.

## localposition은 임의의 기준에서의 위치이다. 그 임의의 위치가 부모 클래스인 경우등이 있음
  ex) localposition이 (1,0) 이면 부모의 위치(어떤기준) + (1,0) 이다
      worldposition이 (1,0) 이면 부모위치 이런건 아무 상관없이 world 좌표계에서 (1,0) 이다

## 다른 엔진에서는, 자식오브젝트를 worldposition으로 위치를 바꿔주면 그 위치에 고정되어서 더이상 부모오브젝트를 따라가지않는다.
   우리 엔진에서는 worldposition으로 위치를 바꾸면 그래도 부모의 위치이동에 함께 종속되어 이동한다.
   - 일반적으로 굳이 worldposition으로 위치를 바꿀 이유가 없다. 그냥 localposition으로 위치를 바꾸면 되는데 굳이 worldposition으로 위치를 변경했다는 것은,
     이 오브젝트가 누구한테 속해있건 아니건 그 위치에 딱 있으면 좋겠다는 의도를 갖고있다고 여기기 때문임. 
     그러나 선생님 엔진은 과반수투표에서 world로 위치바꾼 이후에도 부모의 위치변경에 함께 움직이도록 했다.
    

## localscale과 wolrdscale 의 차이를 알아야한다.  worldscale로 크기를 바꿨다면 localscale이 그만큼 변경되야한다. 즉, 그냥 localscale바꿔도 되는데 굳이 worldscale로 바꿨다는 것은,
   부모의 scale에 관계없이 절대적으로 크기를 바꾼것이다. (원래대로라면 부모의 scale 행렬을 곱하면서 본인의 scale을 결정했음) 
   이때, 변경된 본인의 크기와 부모 오브젝트의 크기 비율이 달라졌다면, 그리고 앞으로는 그 비율로 크기가 달라진다면 변경된 worldscale에 맞춰 localscale의 행렬역시 변경되어야 할것이다.

   ex) 부모 크기가 10, 내 크기가 10이다. 이떄 worldscale로 내 크기를 1로 바꿨다. 이제 부모는 10, 나는 1이다. 따라서 내 localscale 행렬은 1에서 0.1로 바뀔 것이다.
       그래야 부모의 scale을 곱해도 10이 아니라 1이 나올테니까.

- worldmatrix의 공식용어는 affine matrix라고 한다. (크자이공부 ) (크기 자전 이동 공전 부는 뭐였더라) 
- 크자이공부 행렬들을 하나의 행려로 만들어 주는 함수가 바로 Compose다. 반대가 decompose.



//////////////////////////////////////////////////////////// 23. 9. 20


remind) shader는 일반적인 C++의 함수랑 같은 의미라고 볼수있지만 shader는 특히 이름인 shade 처럼 그리기에 좀더 특화된 함수이다.
        CPU의 순차적인 처리로는 그 엄청난 수의 vertex 또는 pixel을 그리려면 너무많은 시간이 필요하므로 GPU전문 함수, 즉 점, 픽셀 그리기 전용함수가 바로 shader인 것이다.
        이제 shader setting을 일일히 사용자가 세팅해주기 전에 자동으로 setting하는 기능이 추가된다. 




* GameEngineShaderResHelper.h 에서 ConstantBufferSetters; 이런 변수들은 조사만 하고 끝나는게 아니라 그 정보를 알고있어야 하기 때문에 그 정보를 저장하는 용도로 사용되는 변수이다.

쉐이더 이름이 다르면 상수버퍼를 따로 만들것이다. -> 이것을 자동화로 따로 만들지 말고 버퍼 하나를 돌려쓰도록 하겠다 (메모리자원절약)
굳이상수 버퍼를 직접 갖지 않고 setter를 드는 이유는 나중에 나옴    

## RenderBase는 내가 원하는 색깔로 세팅할 정보를 가질 상수버퍼. 오늘 새로 파일이 만들어졌다.

## GameEngineDevice에서 GameEngineConstantBuffer::CreateAndFind 는 쉐이더 자동화가 될때 안쓸 함수였다. 이 함수를 쓴다는 것은 쉐이더에 어떤 이름을 가진 쉐이더가 몇바이트를 쓰는지 다 
   알고 쓴다는 것이다. 이것은 선생님은 싫어한다 인간을 믿지 못해서 사용자가 최대한 내부구조를 모르고 알아서 자동으로 돌아가는걸 좋아하기 때문에.

## Newsetter의 UpperName은 쉐이더함수가 사용하는 상수버퍼의 정보를 가짐

## 우리엔진은 텍스쳐 세팅을 안해주면 터트리지않고 기본 텍스처를 출력하게한다. 
## 부모자식에 같은이름 (Entryname)은 별로 좋지 않기에 vertexshader에서 삭제

## 쉐이더 자동화에서, sampler는 texture에 종속되도록한다. 이유는? 보통 point로 그리다가 liner로 바꾸는 경우, 또는 그반대의 경우는 아마 없을것이다 
   샘플러가 텍스처에 종속되는 방식이 다른 엔진에서도 사용되는 방식이기도 하다. 즉, 기본적으로 샘플러가 따로있지않다.
   이제 texture만들때 sampler 정보도 같이 집어넣어줘야한다. - 텍스처 색깔을 가져오는데 어떤 방식으로 색깔을 가져올건지 sampler가 필수적으로 텍스처에 종속될수 밖에 없다. 
   (쉐이더마다 샘플러를 다르게 설정하는 언리얼엔진 방식도 있지만 그것은 너무 복잡한 제3의 방식이므로 논외.)

## 만들수 있는 sampler 종류는 제한적인데 텍스처 100개면 100개의 sampler를 만들어야 하나? -> NO! 리소스를 중복 생성하기 싫으니까 
   sampler에 static변수로 OptionSamplers를 하나 만들겠다. 이제 기능이 같은(Create() 할때 인자가 같은) sampler는 중복 생성하지 않을것이다. 
     
## 선생님왈 - sampler 만들때 인자가 Sampler 옵션 설정할때 쓰이는 모습을 잘 기억해 놓으세요. 샘플러는 아마 끽해야 최대 4개정도 만들어질겁니다.
   어차피 포인트, 라이너냐 그리고 클램프냐 아니냐 정도일테니. 샘플러 옵션 다양하게 쓰고싶은사람 없잖아요. 그래서 옵션 설정하는 인자도 두개고.


** 텍스처쉐이더와 샘플러쉐이더를 엮는 방식이 필요하다. hlsl에서따로 규칙이 없기 때문에 반대로 말하면 내 맘대로이다. 우리는 텍스처와 샘플러를 엮기로 했기 때문에
   우리 스스로가 텍스처쉐이더와 샘플러쉐이더를 엮는 규칙을 만들어야한다. 
    - 샘플러 쉐이더만 설정하고 싶은 경우도 있는데 이는 아직 생각하지 말자 (우리는 무조건 샘플러는 텍스처에 종속되기로 했으므로)
    - 우리의 규칙은 텍스처쉐이더 이름 뒤에 sampler 문자열이 있는 쉐이더를 자동으로 엮어주기로 한다. 
      ex) DifferTex 라는 텍스처쉐이더는 DifferTexSampler 쉐이더와 자동으로 엮어질 것이다. 
    - 기본 값으로 무조건 "EngineBaseSampler"라는 이름으로 세팅될 것입니다. 본인이 직접 세팅하고 싶으면 SetSampler를 직접 호출하세요.

- AutoCompile은 기본적인 쉐이더 설정이 끝나고 수행됩니다. 

## 이제 GameEngineSpriteRenderer에서 SetSamplerState가 필요 없어집니다. 이걸 썼던 사람들은 고쳐야할거에요
## 이제 기본적인 쉐이더 조사하는 기능은 끝났습니다. 내일은 렌더러한테 이 쉐이더 써라고 하는 순간 자동으로 뭘 세팅할지 알고있는 상태가 될겁니다. 



////////////////////////////////////////////// 23. 9. 21



!! 지난번놓친것) ShaderHelper가 Setter를 Multimap으로 갖고있는 이유? -> 이름은 같지만 다른 쉐이더 setter를 가질 경우가 있어서? 
   => 일단 선생님왈, 이름은 하나도 중요하지 않다. 상수버퍼는 이름을 기반으로한 자료구조가 아닌 바이트크기를 기반으로한 자료구조이다. (더 정확한 것은 파워포인트 내용을 참고)

 * GameEngineMesh 와 GameEngineMaterial 추가
 
 !! 주의할점) 새롭게 추가된건 아무것도 없다. 기존에 일일히 한줄한줄세팅하던걸 밖에서 볼땐 그냥 자동으로 해주는거 처럼 보이게 구조를 바꾸는 작업을 오늘 하는것임.
           외부인터페이스는 하나도 안바낌

  - Mesh란? - 레스터라이저 전에 범위를 잡을떄 사용하는 버텍스와 인덱스버퍼를 관리해줌.
  - Material이란? - Mesh를 통해 잡힌 영역의 색깔에 관련된 리소스를 처리함
  - Mesh와 Material을 굳이 따로 두는 이유 = 내가 직접 Vertex와 index버퍼 등등을 일일히 설정하기 귀찮다. 사용자 입장에서는 그냥 알아서 묶어서 처리해줬으면한다. 
    반대로 말하자면 이걸 이용안하면 일일히 vertex, index버퍼 설정을 해줘야함 
  - 오늘부로 Renderer에 있는 ResSetting() 코드일부를 Mesh와 Material이 나눠 가질겁니다.
    ex) 레스터라이저는 material이 가져감
        버텍스쉐이더, 픽셀쉐이더 블렌더도 material이 가져감

        inputassembler()는 mesh가 가져감, 그럼 당연히
        vertexbuffer와 indexbuffer도 mesh가 가져감

 * Mesh

  - mesh, vertexbuffer, indexbuffer 이름이 다 같기 때문에 Create()의 인자를 _name 하나로 두고 인자 3개 _name으로 overload한 함수와 연결시킴. 
    ex) device 에 "Rect"이름으로 세팅한 코드을 볼것. mesh, vertexbuffer, indexbuffer 다 같다.
    
 * Material 

   - DeviceRecource 에 나중에 본인이 필요한 material 만들면 된다. 
     선생님은 기본으로 Mat 라는 material을 만들어 두었다. 레스터라이저와 블렌드는 DeviceResource 에서 말고 material 생성자에서 미리 기본설정을 세팅해두었다. 

 * Renderer

  - 이제 ResSetting()에서 Mesh Material setting을 해서 코드가 간결해졌다. 파이프라인의 각단계를 Mesh와 Material이 어떻게 나눠가졌는지 살펴볼것
  - Layout은 버텍스버퍼(mesh)와 버텍스쉐이더(Material) 둘다 필요하므로 Mesh와 Material중 하나만 독차지 해서 가질수 없다. 그래서 Layout은 renderer가 직접 따로 가진다.
    그래서 렌더링파이프라인에 세팅순서가 중요하지 않다만, 레이아웃세팅 만큼은 반드시 Mesh의 inputassembler1()과 material의 vertexshader setting이 끝나고 layout 세팅하는 순서여야한다.
    실제 코드에도 3번째에 레이아웃 setting을 해주는것을 주목하라. 내부코드도 mesh나 material 어느 한쪽이 세팅안되있으면 터지게 짜여졌다.

  - ShaderResCopy(_Shader) -> 어떤 쉐이더에 있는 리소스 정보(리소스 그 자체는 아니라고함 맞는지 공부해볼것) 들을 렌더러가 모두 복사해서 갖고싶을때.

 * ShaderResHelper

  - AllShaderResourceSetting() - (내가 가지고있는 쉐이더 정보로 세팅시키는 함수라고 추정중..) ( ShaderResCopy() 함수로 정보를 가져오는 작업 바로 뒤에 쓰이는 함수라고 추정중)
  - 모든 상수버퍼 Setting에 이 상수버퍼가 어느 리소스의 상수버퍼인지 구별하게 되었다. (ShaderType 스위치문 코드가 반복적으로 쓰여진걸 주목하라.) 



 * ConstantBuffer

  - 기존 Setting()함수는 본인이 어디에 사용되는 상수버퍼인지 알수 없었으므로 Setting() 함수 이름도 세분화해서 새로 만들어 졌다. VSSetting, PSSetting.
  


## 프랜스폼데이터를, 상수버퍼에 맞기 ChangeData()해서, 그 상수 Buffer를 Setting()해야 SpriteRenderer가 그려질것이다. 지금 그 작업을 안하고 있으므로 이제 해주는 작업을 시작하자.
## 픽셀쉐이더에서 프렌스폼데이터 쓰고 버텍스에서 트랜스폼데이터 쓰고 그럴수 있기때문에 multimap으로 한것이다= > 드디어 멀티맵 자료구조를 shaderResHelper에 쓴 이유가 나온다.
   transform 이라는 이름은 같지만 따로따로 세팅해줘야 하는 경우이다.

 - constantBufferLink() 
   - 쉐이더는 모든 데이터를 지역변수로 취급하므로 한번 작업해줘서 데이터를 한번 쓰고 다시 호출해도 원래대로 초기화되어있다(데이터 변경정보를 저장안해놈 매번 새롭다.)
       !!) 쉐이더에 포인터를 넣어주는것은 무의미한짓이다. 주소값을 쉐이더가 가져가서 할수있는게 없다 무조건 값형을 넣어줘야한다.
   - 멀티맵 이터레이터로 같은 stirng의 버퍼setter를 모두 접근한다. 
   - GameEngineShaderResource에 DataSize 추가. 상수버퍼에 크기실수를 용납하지 않겠다. 버퍼크기를 실수하면 프로그램 터트리기로 함.

 - SpriteData는 어떤 쉐이더는 안쓸수도 있기 때문에 TransformData처럼 Renderer가 반드시 신경쓸 필요가 없다. 
 - CurSprite.SpritePivot으로 SpriteRenderer와 쉐이더가 서로 연결되었다.



 ///////////////////////////////////////////// 23. 9. 22



  * 쉐이더리소스헬퍼를 만든이유
    - 쉐이더리소스는 렌더링에서 사용되는데, 이때 수많은 쉐이더리소스 설정이 있을 수가 있다. 이렇게 어떤 렌더링 만들때마다 일일히 세팅을 해줘야하는게 번거롭다. 
      이를 도와주는 클래스가 Mesh, Material 등이다.
    - 렌더러가 200개면 200개의 Material이 필요하다. 그러나 딱 그냥 색깔만 바꾸고 싶다면? 200개 일일히 Material을 만드는 노가다를 하기가 싫을것이다.
      이때 Material은 같지만 쉐이더에서 텍스처나 상수버퍼를 바꿔서 다르게 쓸 수 있는 것이다.
    - 그러나 일반적인 엔진에서는 텍스처나 상수버퍼를 바꾸지 못하게 했다. 이유는 바로 느려져서이다. 쉐이더의 텍스처나 상수버퍼를 바꾸는 순간 다이렉트는 이걸 새로운 랜더링 요소로 봐서
      반복작업한다. 그럴바에 차라리 렌더링 하나당 일일히 Material 만들어 주는것이 속도면에서 훨씬 이득이라는 것이다. 
    - 이걸 쉽게 이해하려면 아래의 예시를 보면된다.
      엔진) 1. Material Setting
            2. 메쉬 100개 드로우
      선생님 엔진) 1. Material Settng
                     1-1. Material Setting 변경
                   2. 메쉬 30개 드로우
                   3. 이떄 다시 Material Setting 변경
                   4. 메쉬 20개 드로우
                   5.(머티리얼 세팅 바꿀때마다 무한대로 작업 리스트가 늘어남) 
    - 컬러를 바꾼다는 것은 상수버퍼의 데이터를 바꾼다는 것이다. 이때 일반적인 엔진은 같은 머티리얼을 쓰는 렌더러들은 모두 동일하게 색깔이 바뀐다. 그게 싫으면 머티리얼 하나를 다시 만들어야함.
 
 핵심) - 렌더러가 머티리얼을 가지고 그 머티리얼이 텍스처, 샘플러, 상수버퍼를 직접 들고있는게 아니라, 렌더러가 쉐이더리로스헬퍼로 텍스처, 샘플러, 상수버퍼를 렌더링마다 들고있게하는 것이다.
         즉, 같은 머티리얼을 가진 렌더러는 세팅이 똑같을 수 밖에 없는데, 렌더러들이 하나의 머티리얼을 공유 방식이 아닌 렌더러 하나하나가 쉐이더리소스헬퍼를 따로 가지게 한것이다. 
         쉐이더리소스헬퍼를 가졌다고 렌더링이 머티리얼을 안가지는 건 아니다 다만 머티리얼이 쉐이더리소스헬퍼의 도움을 받아서 존재하게 한것이다. 


  * 전반적인 렌더링 흐름

    -  쉐이더는 쉐이더리소스헬퍼를 들고있습니다. 각 쉐이더 컴파일이 끝나면 ShderResCheck()로 쉐이더의 리소스를 조사해주는데, 이 조사의 주체가 쉐이더리소스헬퍼입니다.
    - 이렇게 조사한 쉐이더리소스 정보를 저장하려고, 객체를 따로 두어 정보를 저장하는데 그것이 쉐이더리소스헬퍼에 있는 Setter입니다. (상수버퍼, 텍스처, 샘플러 setter)
    - 이렇게 조사한 쉐이더리소스 정보를 나중에 렌더러가 선택해서 세팅에 사용할것입니다.
      더 자세히말하자면, 스프라이트 렌더러가 Mesh와 Material을 세팅하라고 하는 순간 쉐이더리소스헬퍼에서 인자로 넣어준 문자열에 매칭되는 쉐이더리소를 불러와서 세팅해줍니다.
      ex) MeshSetting("Rect")-> "Rect" 에 관련된 쉐이더리소스를 쉐이더리소스 헬퍼에서 찾아서 렌더러에 갖다줌

  * 렌더러가 쉐이더리소스를 갖는다는 구조를 더 정확히 설명해보자
    - 원래 렌더러는 Material 하나를 갖고 있다.
    - 그 Material은 텍스처, 상수버퍼, 샘플러 리소스를 '고정적'으로 갖고있다.
    - 따라서 렌더러가 Material 하나를 선택하면 텍스처만 따로 바꾼다던지, 상수버퍼만 따로 바꾼다던지 이런 작업은 불가능하다.

    - 선생님 엔진은 렌더러가 Material 하나를 직접 갖고 있지 말고, 상수버퍼, 텍스처, 샘플러리소스를 저장할수 있는 공간 3개를 따로 두고
      Material 3가지 요소의 일부만 따와서 렌더러에 저장해놓는다. 
      즉, 렌더러에 Material 요소를 값으로 복사해서 들고있다. 
    - Material하나만 들고있는 방식이아닌, Material의 3가지 요소를 값복사해서 렌더러가 들고있다
       
        ## 원래 구조          ## 선생님 구조
           [렌더러]               [렌더러]
            -Material              
              -텍스처              -텍스처
              -상수버퍼   ---->    -상수버퍼
              -샘플러              -샘플러

        * 렌더러가 Material 직접들고 있지않고, Material의 상수버퍼만 값복사해서 가져오고 있는 모습.    
          이런식으로 다른 Material에서 취사선택해서 리소스 가져올수있음. Material 통쨰로 들고올 필요없음
        * 렌더러가 Material요소들을 Pointer로 직접 갖고있지 않는 이유는 Material에 세팅된 리소스들이 바뀌어선 안되기 때문에 값으로 복사해서 들고있음


 - 쉐이더리소스헬퍼에서 SetSampler()는 다른 리소스처럼 string name 만으론 설정못함 texture가 들고있기때문에 포인터가 필요함



 ///////////////////////////////////////////////////// 23. 9. 25



  <작업 1.> 기존에 -1쓰지 않고 filp(이미지반전)되는 기능으로 수정하자

   - decompose 때문에 이상하게 동작할수 있기 때문에 -1은 사용하고싶지 않다
   - UV 값을 건드려서 filp 되게 하겠다. 
   - 기존 uv값은 다음과 같다고 하자.
      [ 0 1 ]
      [ 1 0 ]
   - 여기에 행렬의 각 원소 x에 다음 수식을 적용하면 filp이 된다.
     - (x * -1 + 1) 
     - [(0 * -1 + 1) (1 * -1 +1)]   ==   [1 0]
       [(1 * -1 + 1) (0 * -1 +1)]        [0 1]


 ** TextureShader.fx 가 UV랑 관련이 있다.
    - SpriteRendereInfo 상수버퍼를 만들자. '상수버퍼는 엔진기반이 되어있어서 그냥 만들고 쓰면 되죠 너무 편합니다.'
  * 상수버퍼는 16바이트로 만드는게 좋다. (오류가 덜난다고 함)
  * 그래픽카드는 bool값을 쓰지 않는게 좋다. 그래서 int로 대신 쓰는게좋다. SpriteRendereInfo에서 그 예시가 있음. 
  * 쉐이더 에서는 결과값에 영향을 안주면 HLSL 관점에서는 사용하지 않은 것이다. if(0 != FilpLeft) 역시 그 코드가 사라져도 result에 아무런 영향도 주지 않는다. 
      !!) 쉐이더의 상수버퍼는 선언했고 코드 적어줬다고  존재한다고 생각하면 안됨. 
        ex) 결과에 유의미한 영향을 줘야함. 결과에 영향을 안주는 상수버퍼는 의미가 없으니 그 상수버퍼 삭제할게 이러면서 컴퓨터가 삭제해버림. 
            결과에 영향주는 부분이 없으면 SpriteRenderInfo가 존재하지않는다고 오류가 나버림. 이때 어 난 분명히 선언하고 쉐이더파일에 코드까지 적어줬는데? 이럴수있는데 result에 영향을 주지 않으니 
            컴퓨터는 그 상수버퍼를 삭제해 버린다. 이제 결과에 영향을 주는 코드로 바꾸자

             Result.TEXCOORD.x = (_Input.TEXCOORD.x * Scale2DX) + Pos2DX;
             Result.TEXCOORD.y = (_Input.TEXCOORD.y * Scale2DY) + Pos2DY;

             이 코드를

             Result.TEXCOORD.x = (calUV.x * Scale2DX) + Pos2DX;
             Result.TEXCOORD.y = (calUV.y * Scale2DY) + Pos2DY;

             이렇게 결과값에 영향을 끼치면 HLSL는 SpriteRendereInfo 상수버퍼를 유효한 리소스로 보고 삭제하지 않는다.


  - 오른쪽 버튼 누르면 rightflip(), 왼쪽 누르면 leftfilp()이 동작하게 하겠다. transform을 건들지않고 filp기능을 만들었다.



  <작업 2.> ZOOM IN OUT 기능 추가하기.

  <작업 3.> UI 기능 만들기 시작.

    - 카메라 order 4개로 제한.
    - transform.h 에 emum 헤더파일 계속 넣을예정
    - GameEngineUIRenderer가 SpriteRenderer를 상속받는다
    - UI 카메라는 움직이지 않기때문에 Main카메라가 움직이건 줌인줌아웃하건 영향없이 화면에 위치, 크기 그대로 그려지는 상태임. 
  
   <번외 1.> - 기본샘플러를 설정안해줬는데, 샘플러 설정을 세팅 끝까지 안해준 것들은 기본샘플러를 넣어줌 (오늘자 git 확인해볼것)
             - cursprite가 null 이여서 오류가 난것. 쉐이더리소스헬퍼에서 설정해줘도 오류가났었음. 그 부분 주석처리하고 직접 텍스처 넣어줌.
             - 쉐이더리소스 중복해서 넣어질수 있으므로 리소스 clear()하는 기능 추가.
               ex) setMaterial 하기 전에 무조건 clear 한번해주기.
             
     - renderunit은 renderer처럼 componunt를 상속해서 actor에 무조건 종속되어서 사용되게 만들지 않을것이다.



////////////////////////////////////////////////// 23. 9. 26

  

  <작업 1.> RenderUnit 만들기 + GameEngineObject 설계변경

    - 디버그: f5 이후 f8, 단축키 다시보기

    개요) 기존 Renderer는 단순그리기를 하고 싶어도 그리는 과정이 너무 복잡해서 뭐 하나를 화면에 띄우려면 상당히 복잡한 과정을 거쳐야한다. (렌더러가 어느 카메라에 들어가서 복잡한 작업을 해야함)
          화면에 간단한 그리기를 할수있는 클래스를 하나 만들자. 즉 렌더링 구조를 바꾸는것이다.
          구조를 바꾸기원하는 시발점 - 디버그용 박스 하나를 화면에 간단히그리고싶음

    - GameEngineObject가 너무 무거워서 더 가벼운 GameEngineObjectBase를 만들고 기능을 분리했다.
      RenderUnit이 그 GameEngineObjectbase를 상속한다.
       !!) enable_shared_from_this는 부모클래스보다 자식클래스에서 상속하는게 맞긴하지만 엔진관리자(선생님) 입장에서 그냥 최상단 클래스에서 상속함

    - Renderer가 RenderUnit 여러개를 가질수있음

  * 키워드 final: 더이상 상속할수 없음
    ex) class ClassName final : public Parent_class  => 해석: ClassName은 Parent_class라는 걸 상속하고, 다른 클래스는 이 ClassName을 상속할수 없음
        {
          ...    
        };
    - RenderUnit은 final 키워드 써서 다른데서 이 클래스를 상속못하게함
    - RenderUnit 만들때마다 Layout을 따로 만들기 싫다. layout 하나 만들고 여러 renderunit들이 돌려쓰고 싶지만 지금은 그냥 각자 일일히 만든다. 나중에 구조를 바꾸겠다.

  * Renderer
    
    - CreateAndFindRenderUnit(int _index) 
      - 이 함수는 PushBack 방식으로 동작하지 않으니 오해하지않도록 조심하자. 자료구조 Units의 index에 이미 존재하면 만들지 않고, 없을때만 만든다.

    - 값형으로 들고있는 shaderResHelper는 public으로 둠.
      
  * GameEngineLevel

    - GameEngineDebugCore에 인터페이스를 빌려서 IsDebug가 On이면 어떤 동작을 하게 하겠다.
      ## DebugCore는 namespace GameEngineDebug 사용으로 코드가 좀 길다.

    - class GameEngineDebugInfo 는 transform과 renderunit을 갖고, 그게 화면에 뭔가 그릴수 있는 정보가 됨
    - Render와 Transform은 필요에 의해서 엮일뿐 필수가 아님. Render는 버텍스쉐이더 픽셀쉐이더 드로우하면 되는 작업이다.
    - emplace_back()은 기본생성자를 호출해서 벡터에 넣어주는 함수 이므로, 객체 정의할때 썼던 기본 delete코드를 삭제한다. 
      오늘 delet 코드부분 삭제한 객체들 (기억상 아마 2개정도일듯) 확인해볼것. 

    - 디버그 모드 킬때, 보통 UPdate()에서 킬테고, 그쯤에 이미 DebugCore는 CurLevel을 미리 알고 있어야함. 
    - 디버그용 박스 만들때 대각선 선이 그려져도 상관없다고 했으므로 레스터라이저 세팅을 Wire로 해준다.

  ** TextureShader가 디버그용 코드까지 포함하기엔 너무 비대해져서 DebugColorShader를 새로만듬.
     TextureShader에서 그리기용 코드만 복사 하고 다 삭제.



////////////////////////////////////////////////// 23. 9. 27



  <작업 1.> DebugBox에 위치 쉐이더 작업 해주기

    - transform.h의 LocalCalculation()에서 worldmatrix 초기화까지 해주도록 변경해서, cpp파일의 transformupdate()에 있는 transdata.worldmatrix 초기화 부분을 삭제. 
    - renderer구조 변경한거처럼 renderer의 transform이 아닌 image의 transform을 넣어줘서 debugBox이미지 크기를 설정함. 
      그러기 위해서, spriterenderer에 GetImageTransform() 함수를 만들어줌
      (renderer와 image transform을 분리한것을 기억할것)
    - renderunit에 setmaterial을 할때, 부모가 있는 경우엔 상수버퍼를 세팅하지 않게하도록 조건문을 수정. (아마 부모가 머티리얼 세팅을 해놓았어서인듯 확인필요)
    

  << 렌더링파이프라인 보충 >>

    - 1) DirectX건 OpenGL이건 최종목표는 모니터에 픽셀하나를 그리기 위함이다. 그러기 위해서 복잡한 과정을 거쳐서 최종적으로 하는게 바로 픽셀그리기라는 핵심을 기억해야한다.
      2) Mesh가 바로 그 모니터에 그려질 영역을 표시하는 작업니다. 
      3) VerTex 설정을 잘 살펴보라. {-0.5, 0.5..} 이런 식으로 만들었다. 그러기 위해선 우선 좌표계 (윈도우좌표계 등등)를 이해햐고있어야한다.
        ex) Vertex[0] = { { -0.5f, 0.5f, 0.0f, 1.0f }, {0.0f, 0.0f} };
		    Vertex[1] = { { 0.5f, 0.5f, 0.0f, 1.0f } , {1.0f, 0.0f} };
		    Vertex[2] = { { 0.5f, -0.5f, 0.0f, 1.0f }  , {1.0f, 1.0f} };
	     	Vertex[3] = { { -0.5f, -0.5f, 0.0f, 1.0f } , {0.0f, 1.0f} };
          - 위 예시는 윈도우 좌표계 0을 기준으로 길이가 0.5인 영역이 되는 사각형이 나오도록 점 4개를 만들게 되는 것이다. (사실 사각형 영역의 개념까지 집어넣으려면 indexbuffer까지 필요. 저거만 있으면 걍 점 4개임.) 
          - 이제 그 사각형 안에 바로 우리가 원하는 이미지를 넣어서 화면에 띄으고 싶은 것이다. 
        ex) PixelOutPut DebugColor_VS(GameEngineVertex2D _Input) 에서  GameEngineVertex2D _Input 가 바로 저 날것의 점 4개를 말한다.
            월드뷰프로젝션을 곱하지 않은상태이다. 

      
                                 











































































^^^^^^^^^^^


송구하지만 오전에 해결된줄알고 경솔하게 좋아했었는데 사실은 질문하다가 저 스스로 말려버린것 같습니다..
제가 해야했던 올바른 질문은 'lib파일이 추가 안되서 프로그램이 실행안되는 문제' 가 아니라 'pull하면 lib 파일만 사라지는 현상' 입니다. 
사실 프로그램은 이미 이전에도 잘 실행이 되고있습니다. 오전에 솔루션에서 작업하고,
push를 하고 다시 pull 해서 lib 파일이 정상적으로 있는지 확인해고 해결됬다고 말씀 드렸어야 했는데 정신이 없어서 
원래 문제와 별 상관는데 프로그램실행이 잘되는걸 확인하자 근본적인 문제점을 망각하고 잘해결됬다고 결론지어버렸습니다.

제가 마주친 문제점을 정확하게 기술하면

1. pull 하면 lib 파일이 없어서 프로그램이 실행안됨.
2. lib 파일을 선생님 프로젝트에서 제 프로젝트로 복붙하면 프로그램이 정상 실행됨
3. 그 상태에서 push함
4. 다시 pull 하면 lib파일 없음
이 상황 반복

그래서 제가 확인해본 조치

이때 1번의 상태에서 2번 작업인 lib 추가 방법을 하나도 틀리지 않고 그대로 기술하면
2-1. 



























































































































