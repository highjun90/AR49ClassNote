 어제 반사광까지 했고, 거기에 텍스처 입히는거 해볼게요

 - 픽셀쉐이더에서 플래그 값인 g_btex_0으로 텍스처 설정이 되어있으면 텍스처를 씌워줄겁니다.

 - 스피어에서 UV값 설정하는 원리.
  - 가로로 빙 둘러서 두루마기 휴지 감싸듯 UV값을 각 정점에 부여했다. 시계가 움직이듯
         0.25
    0.375    0.125
  0.5              0
    0.625    0.825
          0.75

   (구의 위에서 바라봤을때 정점의UV 값 배치. 반시계방향으로 부여했는데 스피어 메쉬 소스코드 바라볼것 시계방향힐수도 있음. 바로위에 예시로 든 정점의 UV값은 0이 x축 플러스 방향.)
 
 - 지금 표면이 너무 매끄러운 메쉬밖에 표현을 못하는데 어떻게 해야 울퉁불퉁한 표면을 만들어 낼수 있을까?
   - 실제로 많은 정점을 사용한다.
     테셀레이션을 활용한다. 실제 정점수를 엄청나게 늘려버리는 방법이다. 
     ** 헐쉐이더와 도메인쉐이더를 합친걸 테셀레이션 이라고한다.
   - 아니면 처음부터 그래픽디자이너가 노가다해서 정점을 많이 쓴 메쉬를 쓴다.
   - 아니면 Nanailt  (나나이트)라고 다이렉트에서 새로 제공하는 기능이 있는데 이건 우리 수준에선 힘들다.
   - 마직막으로 노말맵핑이라고 사기치는 방법(?)이 있다. 
    - 실제 정점수는 그대로(사각형 평면 6개)유지하고, 실제 정점의 노말은 쓰지않고, 외부에 있는 노말데이터를 가져다가 쓰는것이다. 
      법선매핑이라고도 한다. 
  
 - 지금 당장은 정점수를 그대로 유지한채 노말맵핑이란걸 공부해볼겁니다
  - 실제 텍스처는 색상만 가져오고, 노말맵이라는 걸 활용해서 노말맵에서 추출한 색상은 그걸 법선벡터로 치환해서 쓰는 것입니다.
    실제 정점들이 평면이더라 하더라도(노말이 다 같더라도) 외부에서 어떤 이미지를 가져와서 그 RGB값을 각 픽셀에 대응시켜서 그걸 원래 노말대신 활용해서 빛계산을 하면 울퉁불퉁해 보인다.
  
    요즘 3D툴은 알아서 노말맵을 뽑아주는 툴도 있어요. 원본 텍스처밖에 없어도 알아서 노말맵을 생성해주는 거죠.
  - 이런 방법을 쓰는 이유는 최적화 때문이에요. 정점개수는 유지하면서 좀더 극적이고 다채로운 효과를 주고싶은거죠. 

 - 이제 픽쉘쉐이더에서 플래그값으로 g_btex_1이 참이면, 노말맵핑까지 진행해줄겁니다.


 - 노말맵은 왜 파란색이 많나요?
  - 이유는 크게 2가지 입니다.
   - 노말맵은 우리의 평소에 쓰던 좌표계랑 좀 다릅니다. 방향죽이 다르다고하죠.
     z축과 y축이 서로 바뀌어져 있어요. 즉 위로 향하는게 z죽이고, 안으로 들어가는게 y축이에요. 우린 항상 위가 y축이고 앞이 z축이었는데 z y가 서로 뒤집힌거죠. ( y축은 마이너스 방향으로도 바뀜)
     노말맵 기법 만들당시 그렇게 설정해서 만들었다고 합니다..

   - 노말맵이 저장되는 방식에도 영향이 있습니다. 노말맵을 만드는 방식이 2가지 인거죠.
    1) 색깔이 전제척으로 파란색인 노말맵
    2) 무지개색

    왜이럴까요?

    2)번 방법도 안쓰는건 아닌데 1)을 많이씁니다.

    노말맵에 저장되어있는 색상값은 로컬스페이스 기준의 노말벡터로 치환됩니다. 이유는? 그렇게 해야 물체가 월드뷰로 이동할떄 같이 노말벡터도 이동해서 엉뚱한 노말이 되지 않기 때문.
    즉 노말맵에 있는 값을 실제로 그대로 쓰면 안된다는 거죠.
    2)번 방식은 물체에 들어갈 노말값이 로컬스페이스에서 절댓값으로 쓰이고, 물체가 움직이는 순간 의도한 노말이 다 틀어져버립니다. (노말 절댓값은 변하지 않는데 의도한대로 물체의 표면이 표현되지 않는다는말)
    색깔이 알록달록이란건 노말 방향이 가지각색이라는거죠.
    이게 문제가 되는 이유가 움직일 수 있는 메쉬라면 막 살을 뚫고 법선이 들어가는건데 말이 안되요.

    노말이 절댓값이면 노말을 입혀놓은다음에 그 메쉬가 움직여버리면 노말이 다 틀어져 버립니다.
    다만 대신에 이런 단점이 있으나 장점은 이런 방식은 추출한 값을 바로 뷰스페이스로 보내버리면 되어서 연산이 간단합니다.

    단점1) 일관된 위치가 아니면 적용시키기 힘들다. (Pos가 바뀌는 순간 이상한 결과로 나옴)
    단점2) 고정된 형태의 물체에만 적용시킬수있다.
     - 고정된 절댓값이기 때문에, 메쉬 형태에 따라 적용시키지 못할 메쉬도 존재할수있음
       예를들어, 스피어 전용노말맵은 평면메쉬에 적용시키면 이상하게 된다.
       스피어의 법선벡터는 사방으로 튀어나가는데 평면은 적어도 180도를 넘어가면 안되는데 평면 안으로 파고들어가는 경우가 있을 수있음.

    이런 단점 때문에 요즘엔 거의 무지개색으로 안쓴다.

    푸른색 계통 노말맵은 상대적인 값이다. 연산을 좀더 해야하지만 범용성있게 모든 형태의 물체에 적용할 수도 있고, 메쉬가 움직임에도 상관이 없다.

다음 교시에서는 어떻게 파란 노말맵이 상대적인 값이 될 수 있는지 그 원리를 알아봅시다.




정리 : 1. 스피어 메쉬에 텍스처를 매핑하는 방식은 두루마기 휴지 두르듯 UV값이 각 정점에 부여되어 있다는 것이다.
       2. 매끈한 표면을 울퉁불퉁한 표면으로 바꿔서 표현하고 싶다면 크게 2가지 방법이 있다.
          (1) 테셀레이션(실제로 정점 개수를 무지막지하게 만든다)
          (2) 노말매핑. 노말맵을 사용해서 간접적으로 표면에 다채로운 효과를 준다.
       3. 노말맵핑에도 크게 2가지 방법이 있는데
          (1)절댓값을 쓰는 노말맵. 단점 2가지가 있어서 연산이 간단하다는 장점에도 불구하고 이제는 거의 안쓰는 방식.
            - 단점1) 로컬스페이스에서 메쉬가 움직여 버리면 물체 표면이 달라져보임. 즉, 일관성이 사라짐
              단점2) 메쉬의 형태가 다르면 사용할 수가 없음. 한 메쉬 전용으로만 쓸수있음. 다른 메쉬에 적용시키면 거의 반드시 부자연스럽게 노말이 적용됨
          (2)상대값을 쓰는 노말맵.

186
======================================================================================================================================


 - 파란 노말맵은 왜 상대적인 값을 가진다는 걸까?

  - 우선, 노말맵 좌표계에서 (0,0,1)은 Z축 방향으로 올라가는, 즉 표면 위로 나아가는 벡터란걸 이해하고 있어야한다.
    다시말해, RGB에서 B는 세번째에 위치해 있고, 이때 (0,0,1)의 좌표값이 z축으로 올라가는 벡터고 그게 색깔의 파란색에 대응된다는 말이다.
    노말맵이 그냥 다 파란색이라면 노말맵을 안쓰는 효과와 동일한 결과가 나온다. 그냥 각 정점의 노말벡터랑 똑같으니까.
    
    우선 (0,0,1)을 기준으로하고 거기에 살짝 쪼금씩 기울어지게 앞의 두 자리에 값을 넣어주니까 노말맵이 파란색 계열일 수 밖에 없는 것이다.
    (0.5, 0, 1)을 예시로 하면
    z축쪽 으로 가되, x축쪽으로 45도 기울어지게 표면에서 뻗어나가는 벡터 형태가된다. 
 
  - 단점은 최종 방향벡터를 계산해 줘야한다.


  - 노말맵에 기록된 한 픽셀의 색깔은 탄젠트스페이스(평면좌표계)에 존재하는 한 벡터라고 하고, 그걸 우리쪽 공간좌표계(월드뷰)에 적용시켜야 합니다.

  - 평면좌표계의 1 0 0  좌표계는 우리 좌표계로 오면서 Tx Ty Tz 로 변경되어야합니다. 전자를 A행렬이라고 하고 후자를 B라고 했을때 
                 0 1 0                                Bx By Bz
                 0 0 1                                Nx Ny Nz 

    A x C = B 
    식이 정립하게 해주는 C 회전행렬을 구할수 있으면 
    노말맵의 임의의 어떤 노말벡터에 C행렬을 곱하면 자연스레 그 픽셀의 노말벡터를 구할 수 있게된다. 
    
    바로 이  C행렬을 구하면 노말맵에 있는 상대적인 노말벡터를 우리 좌표계의 노말벡터 방향으로 알맞게 변환시킬 수 있게 된다.

    그런데 A가 단위행렬이네? 어 뭐야 그러면 C == B네? 개꿀이다. 결국 한 픽셀에서 상대적인 노말벡터를 우리쪽좌표계로 변환하는 회전행렬은 
    그 픽셀의 최종 노말,탄젠트,바이노말 벡터가 되는것이다.

    이제 결론만 말하자면,
    한 픽셀의 노말벡터를 외부 리소스로 치환할껀데, 이때 외부에서 가져온 노말벡터를 그대로 쓰면 안되고, 픽셀본인의 노말,탄젠트,바이노말로 이뤄진 회전행렬을 한번 곱하고
    그 결과를 본인의 노말벡터로 사용하면 된다.

  - 쉐이더는 색상값 0~255을 0~1로 치환해서 가져오는데 이러면 음수값을 표현 못하게 되고, 

  - 해결방법? 범위를 0~1에서 추출한 값을 두배로 늘려서 0~2로 확장한다. 그리고 그 값에 1을 빼준다. 
    즉 정중앙에 있는 색상값은 127이고 이게 쉐이더로 들어오면 0.5가된다. 이걸 2배로 곱하면 1이되고, 거기에 1을 빼면 0이되니 실제로 빛의 방향이 정중앙이 된다.
    반대로 왼전 반대방향(마이너스)이라면 색상값은 0이고, 그걸 두배로 해도 0이고, 거기에 1을 빼면 -1이되니 실제 빛의 방향이 마이너스(축의 반대방향)이 된다.
    그럼 축의 정방향(플러스)는? 색상값 255가 쉐이더로 들어올때 1이되고, 그걸 두배하면 2가되고, 거기에 1을 빼면 1이되니 축의 플러스방향이 된다.


 - 여기서 끝나면 좋을텐데.. 우리는 탄젠트벡터가 오른쪽, 바이노멀이 아래쪽, 노멀벡터가 안쪽(몸쪽으로 들어가는)인데,
   오픈GL은 y(바이노멀)이 위쪽이다.

   만약 리소스가 오픈GL 리소스 였다면, 바이노멀에 역방향을 취해야 하기 때문에 -(마이너스)를 붙여줘야된다. 리소스가 다이렉트 전용이라면 해줄 필요가 없는 작업임.
   일단 수업에 사용된 리소스가 오픈쥐엘꺼여서 마이너스 붙여줬어요.



187
====================================================



