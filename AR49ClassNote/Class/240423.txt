 지난 시간에 큐브메쉬의 빛 처리가 제대로 안된 이유를 설명할게요

  - 우선, 광원의 방향은 월드 스페이스 기준으로 설정한거에요. 뷰스페이스도 아니고 로컬 스페이스도 아닙니다. 이 사전약속에 따라서 쉐이더 코드가 달라져야 할수 있음. 꼭 명심할것
    우리는 월드기준으로 빛세기를 처리하고있어요
 
 - 첫번쨰, 지난 시간에 동차좌표를 0으로 설정해서 노벌벡터의 월드이동을 무효화 처리 했어도, 크기는 무효화 하지 않았습니다.

   빛벡터 노멀벡터 두벡터는 단위벡터라고 가정하고 빛의 세기 최대최소값을 정의했는데(0~1사이값), 크기가 1 이상이 되버리면 빛의 세기가 올바르게 계산되지 않겠죠 막 극단적인 색깔 변화가 나타날겁니다.
   따라서 월드 이동 무효화 뿐만아니라 월드행렬에 포함되어있는 크기도 무효화 시켜야합니다.
   그래서 정규화를 꼭 해줘야 0~1사이값이 나옵니다. 
   output.vWorldNormal = normalize(mul(어쩌구)); 이부분이죠. 노멀라이즈 함수로 한번더 감쌌습니다.

   && 지난시간에 월드이동을 무효화 한 이유랑 비슷합니다. 빛의 세기 결과값을 0~1사이로 둬야하기 떄문.
   

 - 두번째, 빛의세기가 음수가 됬을떄(두 벡터 사이 각도가 90도 이상일때) 예외처리를 하지 않았다.
   saturate()함수로 값을 0~1사이로 고정시킨다.
   이걸 안해주면 아무리 Ambitent로 물체가 최소한으로 보이게 해주려고 해도 빛의 세기 값이 마이너스이기 때문에 전혀 안보이는 각도가 생긴다.
   빛의 세기는 음수개념이 없기때문에 이 설정을 해줘야합니다.

   output.LightPow = saturate(dot(output.vWorldNormal, -vLightDir));  이부분입니다.
   빛벡터와 정규화한 법선벡터를 내적하고, saturate()함수로 한번더 감싸줘서 빛의 세기를 0~1로 고정시켰어요. 빛의세기가 음수가 더이상 안나오겠쬬.



 - 이제 sphere 메쉬를 만들건데 이것도 지난기수꺼 가져올게요.
  
  - 우선. 구를 가로로 봤을떄 한 단면을 40등분으로 설정했고요,
          구를 세로로 봤을때도 단면을 40등분으로 설정했습니다.
          분할 수가 많을수록 메쉬 퀼리티가 좋아집니다. 적으면 더 각져보이겠죠

  - 각 정점의 노말벡터는 본인의 포지션이에요. 본인의 좌표자체가 법선벡터라고요. 
    탄젠트는 본인기준 우측으로 설정시켰고요
    바이노멀은 아래쪽으로 향하게.

  - 40 x 2 x 3 x 40 해서 총 9600 개의 정점이 필요하구요
    인덱스버퍼 쓰면 좀 줄일수 있어요

 - 문제점 - 묘하게 구의 명암이 각져보인다..?
   이유 - 구의 분할 횟수를 낮춰보면 알수있다. 한면의 밝기를 일괄적용하기 때문에 구의 어느 경계선이 각져보인다.

 - 해결법?
  - 정점에서 빛을 연산할게 아니라 노말벡터를 보간해서 픽셀 쉐이더에 넘겨줘요. 스피어는 큐브메쉬랑 다르게 토폴로지의 정점들의 법선벡터가 다 다릅니다. (다 자기 Pos라고 했죠?)
    그 사이에 있는 픽셀들은, 정점들의 법선벡터의 보간된 값을 넘겨주는 거에요. 
    정점계산할때 새로 계산해줘야할게 하나 더 추가되는거죠.
  - 즉 이제 빛의세기를 결정하는 방법이 두가지 입니다. 원래는 정점쉐이더에서 미리 결정된 법선벡터로 광원세기를 계산하던지,
    아니면 픽쉘 쉐이더에서 각 정점의 보간된 법선벡터를 이용해서 좀더 부드럽게 픽셀의 광원 세기를 결정하던지.
    원래는 전자가 최적화에 더 유리했는데 컴퓨터성능이 좋아진 현대에는 후자 방식을 선택해도 성능 차이가 거의 없어요.
    
   - 전자를 고로쉐이딩(Gouraud), 픽셀단위에서 연산하면  퐁쉐이딩(Phong) 이라고 합니다.

  - g_int_0을 플래그 값으로 설정해서 0이면 고로쉐이딩 방식으로 빛의 세기를 계산하고, 1이면 퐁쉐이딩 방식으로 설정하게 픽셀쉐이더 코드를 짰어요. 
    

 - 정리 : 1) 빛의 세기를 0~1로 고정하기 위해 여러 설정을 해줘야한다.
             월드뷰프로젝트 행렬 곱할때 이동과 크기 무효화,
             음수 나올때 예외처리
          2) 픽셀마다 빛세기를 더 부드럽게 표현하고싶다면
             고로쉐이딩 대신 퐁쉐이딩.
             고로쉐이딩은 한 토폴로지에 포함된 모든 픽셀들의 빛세기가 일괄적용된것
             퐁쉐이딩은 정점들의 법선벡터의 보간된 값을 써서 개별적으로 빛세기를 결정.


184
============================================================================================================

 && 이제 정점에서 빛의 세기를 계산하는 방식은 없애버릴 꺼에요. 고로쉐이딩 방식어떻게 했지 보고싶으면 184버전 코드를 참조해야합니다.


 - 지금 우리는 표면이 빛의 세기만 고려해서 물체의 색상을 결정하고 있어요. 
   이제는 물체에 빛이 튕겨나와서 나한테 직접 오는빛(반사광)까지 처리해봅시다.
   사진볼때 유독 흰색으로 빛나는 부분있죠? 그게 반사광입니다.
   빛의 반사로 직접 카메라에 들어오는 물체의 부분은 흰색으로 표현시켜주는거죠

 - 우선 빛이 물체 표면에 진입해서, 그떄 반사될때의 반사벡터를 구해야해요.
   반사벡터를 유도하는 공식을 알고있어야합니다.
   벡터와 스칼라를 명백히 구분할줄 알아야하고요.
   벡터는 크기+방향, 스칼라는 크기만 갖고있죠.

 -  vR = vL + {2 x (-vL ' vN) } x vN
  - 풀이 하자면 이렇다. 
    (반사벡터) = (빛의 방향벡터) x (노멀벡터 방향 x 스칼라 크기)
    1) 스칼라 크기는 빛의방향벡터의 음수(반대방향)벡터와 법선벡터를 내적하면 구할수 있다.
       이때 그 스칼라값에 x2를 해줘야 제대로된 최종 스칼라 크기를 구할수 있음.
    2) 1)에서 구한 스칼라는 단순히 크기일 뿐이다. 방향이 되어줄 노멀벡터를 곱하면 최종적으로 위로 향하는 벡터가 완성된다.
    3) 2)에서 구한 벡터와 빛의 방향벡터를 더해주면 최종 반사벡터를 구할 수 있다.
     * 주의할점 1) 2)에서 노말벡터가 다 활용되는데 그 활용에는 분명한 차이가 있음 헷갈리지 말것
    


  - 뷰행렬을 활용하면 굳이 카메라 정보를 가져올 필요가 없어요 이미 뷰행렬에 다 간접적으로 들어있으니까.

 - 지금까지는 빛을 월드에서 계산했죠? 이제 반사광까지 고려하려면 카메라정보(뷰스페이스)에서 계산해야합니다. 그래야 물체에 반사된 빛이 직접 들어오는 위치가 어딘지 알수있을것 아닙니까
   뷰스페이스까지 곱해서 계산해도 결과는 똑같아요 어차피 3법선들도 똑같이 회전했을테니까. (물론 이동 회전은 적용안했어요! 이유는 전시간에 충분히 설명했어요)
   그냥 계산자체를 뷰스페이스 기준으로 한거지 월드스페이스에서 계산한 거랑 결과가 차이가 없습니다.
   달라진거는 오직 월드기준이 아니라 카메라 기준에서 빛 계산했다일 뿐입니다. 

   이제 시선벡터라는 걸 구해요. 시선벡터는 카메라가 물체를 향하는 방향입니다.
   물체에 튕겨나온 반사벡터와 카메라가 바라보는 시선벡터가 일치할떄 소위 눈뽕을 당하는거에요. 그 위치의 물체의 픽셀은 흰색으로 보여야겠죠

 - -vEye(카메라가 물체를 향하는 방향의 역방향)와 vReflect(물체의 반사벡터)를 내적하면 반사광의 세기가 결정됩니다.
 - 저는 빛이 반사될떄 배율을 30퍼로 제한할거에요. 빛은 반사될떄 세기가 약해지거든요. 전역변수 g_SpecularRatio에 저장해놀거구요,
   ReflectPow에 곱해줄겁니다.

 - 이제 물체의 최종색에 반사광까지 더해줄겁니다.



 - 문제점? 반사광 설정에서 코사인함수는 판정이 너무 자비롭다! 
   실제 세상에서는 보는각도가 조금만 틀어져도 밝기가 확 어두워지는데(반사광 효과가 거의 없어져야하는데) 지금상태는 각도를 아무리 비틀어도 2 30퍼정도의 반사광이 있음
   현실세계는 각도를 조금만 비틀어 봐도 반사광의 세기는 거의 0퍼세트에 가까워야함
   따라서 반사광 설정에서 코사인 그래프를 베이스로 하되, 쪼끔만 각도가 어긋나도 값이 확 떨어져야 합니다.

   이런 형태의 그래프는 바로 밑이 0~1사이인 지수함수인 겁니다.
   그래서 pow()함수를 쓰는거구요.
   ReflectPow = pow(ReflectPow, 20.f); 이부분인데
   ReflectPow 는 빛의 세기이기 때문에 무조건 0~1 사이값이고, 우리가 원하는 지수함수의 훌륭한 밑수가 되줍니다.
   ReflectPow(지수함수의 밑) 값이 낮아질수록 결과값(빛의세기)도 급격하게 낮아지는 수학그래프를 보세요.
   https://m.blog.naver.com/junhyuk7272/221027595317
   여기 보시면 밑이 1/2 인 지수함수보다 1/3이 결과값 y가 항상 더 낮은걸 볼수 있죠. (x값이 같을떄)
   현재 픽셀쉐이더에서 지수함수를 활용할때 x값은 20으로 항상 고정인 상태입니다.


정리 : 정점쉐이더에서 더이상 빛의 세기 계산안하고 노말벡터를 뷰스페이스 까지 이동시키고 픽셀쉐이더에 전달해서 픽셀쉐이더가 빛의 세기를 계산하게 한다.(퐁쉐이딩 적용을 위해)
       더이상 월드스페이스에서 빛계산을 하지않고 뷰스페이스에서 계산한다. (반사광 효과 추가를 위해)
       전역변수로 설정된 빛의 방향은 월드기준이기 떄문에, 픽셀쉐이더에서 따로 뷰스페이스 기준으로 설정되게 처리 해줬음
185
============================================================================================================================
   


