 <쓰레드 동기화 문제 해결하기>
 - 갑자기 파티클이 많이 많들어지는 경우는 왜그럴까?

 -	interlockedexchnage()도 사실 동기화에 문제가 있는 함수이다. 
    스폰카운트가 4이고 쓰레드가 10개있다고 칩시다.
    첫번째 쓰레드가 성공했으면 스폰카운트 3으로 바꾸고 원본값 4인걸 확인하면 종료합니다.
    두번째 쓰레드는 스폰카운트 4라고 했는데 origin에는 3으로 떠서 실패하고, 나머지 여덟개도 실패합니다.
    다음부터 계속 반복문 돌면서 하나만 성공, 나머지 실패가 되는 현상이 반복됩니다.
    이게 사실 이상적인 모습인데 이렇게 이상적으로 굴러가지 않습니다. 

    병렬처리라서 무서운것이 있습니다. 락걸려있는 애들 순차적으로 실행될거라고 착각합니다.
    인터락 걸려있는 애들이 한번 다 인터락 영역에 진입하고 나서 다음 사이클 도는 게 아니라, 쓰레드들이 각자도생해서 상도덕없이 진입할 기회 있을 때마다 마구 들어간다.
    그래서 한번 인터락 영역에 들어간 녀셕도 있는데 그동안 어떤애는 세번 들어가고 이런다. 이렇게 되면 많이 진입한 쓰레드는 예를들어 스폰카운트로 1을 만들어서 대기 하고 있는데
    한번밖에 진입하지 못한 쓰레드는 스폰카운트를 (본인은 4로알고있었으니까) 3으로 설정해 버려서 갑자기 파티클을 엄청 많이 만들어버리는 현상이 생긴다.

    이게 스폰카운트 숫자가 컸다고 생각해보라. 100이라고 하면 어떤 쓰레드들은 이제 스폰카운트 1로 만들고 대기하는데 어떤 쓰레드는 스폰카운트를 99로 만들어버려서 갑자기 파티클을 엄청 만들어버린다.
    이런 현상은 결국 이 interlockedexchange()함수의 동기화가 완벽하지 않다는 증거이다. 다음 함수로 이 문제를 해결한다.

  - interlockedcompareexchange()함수는 인자가 4개다. 첫번째는 내가 검사했을때의 스폰카운트의 값, 두번째는 내가 예상하는 실제 스폰카운트 값
                                                     세번째는 내가 바꾸고 싶은 스폰카운트 값. 네번째는 스폰카운트 실제 주소에 있던 값.

    우리 코드에서 spownCount는 내가 검사할때의 스폰카운트 값이고 AliveCount가 실제 스폰카운트주소에 들어있는 값을 받아온 거다.
    그래서 SpawnCount가 AliveCount 값이 다르면 이 쓰레드는 이미 한번 인터락 영역에 들어갔다 나와서 스폰카운트 변경한 놈이므로 이번 틱에는 인터락 영역에 들어가지 않게 도와주는 기능을 가진
    함수가 바로 InterlockedCompareExchange()이다.
 
    

 <파티클 생성주기 문제 해결하기>
 - 파티클이 갑자기 적게 만들어지는 경우는 왜 그럴까?

   DT값이 의도한대로 차곡차곡 누적되면 문제가 없는데  
   어떤 Tick()에서 갑자기 DT값이 커지는 경우도 분명있기 때문에(딴 프로그램 많이 돌릴때 내 프로그램의 DT가 계속 쌓여진 경우) 이러면 스폰카운트가 초기에 의도한 시간주기를 넘어섰으므로 값이 그만큼 커져야한다.
   기존에 설정했던 파티클의 스폰시간 (1 / m_Modlue.SpawnRate) 을 가지고, 현재 누적된 DT타임을 나눈 몫, 그 정수값이 이번 Tick()에 활성화 될 수 있는 스폰카운트의 배율이된다. 
   (원래 스폰카운트 값에 초과한 주기만큼 곱하기)

   그리고 이 경우엔 초과한 DT타임의 정수부분을뺀 나머지 잉여시간을 m_TIme에 또 따로 남겨두는 작업을 해줘야 초기의도된 시간 주기대로 제대로 파티클을 만들수 있다. 


 - 파티클 모듈로 분리해서 컴퓨트 쉐이더가 해당 모듈이 액티브라는 표시가 있어야 그 기능을 수행하게 하겠다
   즉 한번 활성화된 파티클을 쓰레드가 어떤 작업을 해주는데 파티클모듈에서 활성화 되어있는 작업만 해준다는 것이다. 이게 없다면 유연하게 파티클에서 해줘야할 작업을 따로 실행하는게 불편.

======================================================================================================================

< 파티클 위치를 랜덤값으로 지정해주는 구조만들기>
 - 병렬처리기 때문에 시간값만으로 랜덤값을 생성하는건 한계가 있다. 다른 값이 필요한데 그게 쓰레드 id는 다 다르니까 이걸 활용할수 있고, 
   여기에난수표를 더해서 랜덤값을 만들수있다. 난수표는 노이즈텍스처라는 아주 좋은 자원을 활용한다, 노이즈 3번 텍스처를 로딩해놨을테니 그거 쓰겠다.
   그리고 선생님왈 이런 노이즈텍스처를 많이 저장해둬라. 랜덤값만드는 텍스처 자체를 계속 교체해주면 난수표자체가 계속 교체되는 것이므로 킬때마다 랜덤값이 달라진다.

 - 우선 랜더매니저가 이런 노이즈텍스처 여러개를 관리하는 맴버를 둘게요 벡터로 m_vecNoiseTex. 랜더매니저. init().cpp 파일에 에셋매니저에 등록된 노이즈 텍스쳐 가져온다.
   
   참고로,지금은 이해하기 편하라고 키값이 문자열인데 이걸 경로로 바꿀겁니다. 문자열로 키값 하는게 사실 좋은게 아님. 자동로딩 시스템이 지금 구현안되있어서 나중엔 바꿀것임

   노이즈텍스처 3장은 지금 그냥 키값을 경로로 해줄게요. 그래서 Load()함수 인자 두개다 경로가 됬네.
   
   m_vecNoiseTex[0]에다가(첫번째 노이즈텍스처를) t14 슬롯에 바인딩합니다.
 
   particle_update.fx로 돌아와서, 각 쓰레드들이 노이즈텍스처를 cos함수로 접근하고 DT가 그 함수마저 천천히 y축쪽으로 이동해서 결과적으로 노이즈텍스처 전체값에 접근하는 구조를 만들건데
   지금은 그냥 단순 매핑만 해봅니다. 참고로 노이즈텍스처 범위 넘어간애들은 그만큼 텍스처의 반대편영역에 접근함 uv처럼

   sample은 픽셀쉐이더만 쓸수있는 함수고, 여기선 SampleLevel()함수를 씁니다. 세번째 인자는 lod 인데 level of detail 이라고함. 
   고해상도 이미지를 저해상도 이미지로 담으려면 깨져보인다. 화면이 작아질수록 더 열화된 이미지를 써야한다. 거리에따른 디테일을 조절하는게 lod이다. 가까이 있는건 0(원본) 쓰고
   멀리 잇을수록 더 높은 lod값을 쓴다.(lod 높을수록 더 적은 해상도 이미지) 우리 수업은 민맵을 안만들고 원본밖에 안만들기 때문에 무조건 0을 적는다. 나중엔 만들거임.
   lod 값이 높을수록 더 작은 해상도 이미지임

   아그리고 디바이스.cpp 파일에서 에서 컴퓨트 쉐이더로 샘플러하는 코드 없어서 추가합니다. CONTEXT->CS어쩌구.

 - 내가 샘플링하는 전체 영역에 내가 딱 찍은 지점은 가중치를 더 많이줘서 색깔을지정해야함. 이렇게 가중치를 안주면 결국 다 0.5에 몰리게 되고 랜덤값이 잘 안나올것임. 노이즈텍스처가 더 촘촘한 것일수록 이 현상이 더 심함.

 - tParticleModule에 SpawnShape라는 맴버추가. 스폰범위를 말함. 0은 구, 1은 박스.
   Radius 맴버는 SpawnShape를 Sphere로 했을 경우의 반지름.
   vSpawnboxScale은 SpawnShape를 Box로 했을 걍우의 박스크기

 - 파티클 랜덤 생성때 기준이 되는 월드위치까지 파티클 업데이트 컴퓨트 쉐이더에 지정해줘야함 즉 파티클 컴포넌트 본체의 위치. 이건 낼 한다


 오늘 다 못하고 낼함