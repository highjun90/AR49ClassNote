 - 에셋매니저init.cpp 
  - 데칼쉐이더 만들기 Decal Shader
   - Decal.fx 주석에서 설명한대로 기본설정하고,
     파라미터도 미리 설정해준다.
     Tex_0에 내가 원하는 텍스처 이미지 바인딩.


  - 카메라 sortObject()에서 데칼 분류를 안해서 안그려졌었음 domain따라 분류해야함 그거 추가.

  - 카메라에서 디퍼드 물체 렌더하고 나서 라이팅 전에 데칼 그리는 코드 추가.

  - 데칼 큐브에서 렌더링 대상이 아닌 영역이 픽셀 애들은 빨간색으로 그리라고 했는데 실제 화면에서는 아무것도 안그려져 있고 거짓말쟁이 파란색만 제대로 보이는데
    그 이유는 스카이박스 깊이가 덮어버렸기때문이다. 빨간색은 Imgui의 텍스처에서 확인가능.

  - 초록색도 안보이는데 이유는 CDecal::UpdateData()에 역행렬 곱하기 세트도 전달해야됬는데 안하고 있었음 그래서 데칼볼륨메쉬와 땅바닥이 겹치는 위치의 픽셀을 제대로 계산할수 없었음 
    MAT_0에 바인딩하고 업데이트.



 - decal.fx 에서 픽셀의 좌표를 로컬좌표로 끌고왔던 값을 UV값처럼 씁니다. (아 어제 왜 굳이 0.5 더했는지 이해 안됬는데 그냥 미리 UV값 편하게 대응하려고 한거네)
                                                                         (하지만 난 나중에 계산을 하더라도 미리 이런 작업을 미리 하는건 직관적이지 않아서 나는 안할거 같다 차라리 나중에 하고말지..)
 - 출력해보면 잘나오죠?
   자 이걸 어떻게 활용하느냐, 충돌판정이 발생했을데 혈흔같은 이미지가진 데칼 오브젝트를 생성시키고, 일정시간 지나면 서서히 알파값을 줄여서 투명하게 하고 사라지게하면됨.

 - 자 선생님은 decal MRT를 텍스처 2장으로 했잖아요? 여기에 텍스처 하나더 추가할수도있어요 노말텍스처. 부모 오브젝트가 만약에 누워있었다면 그때 노말값 가져와서 누워있었을때에
   노말값으로 데칼을 생성하면 더 자연스럽겠죠 
   아 그냥 지금 노말텍스처 데칼에 추가할게요

   그러면 쉐이더에서도 PS_OUT에 vNormal SV_Target 하나 더 추가할게요.

   그리고 2번텍스처에 포지션타겟을 매핑하도록 변경하고, 1번엔 노말텍스처로 설정할게요.

   내쪽에 미리 건네준 노말이 있으면 그걸 데칼의 노말로 쓰고, 내 노말이 없으면 원래 물체에 있던 노말을 가져다 써야해요.
   
   아 지금 해보니까 구조 너무 많이 바꿔야해서 그냥 노말값 다루는건 취소할게요.. 그냥 다 복구. 텍스처 1에 그냥 포지션타겟입니다. 
   
 - 데칼의 첫번째 텍스처인 colorTargetTex는 알파블랜드를 사용하기 때문에 알파값있는 이미지를 매핑하면 뒤에 있는 다른 이미지 색깔이 겹쳐 보일수도 있어요.

 - Emissive는 데칼이 스스로 광원처럼 역할을 하고, color는 그냥 알파값이 있는 문신 역할만 하기 때문에 서로 그려지는 성질이 다릅니다.
   이것은 두 텍스처의 블랜드 타입이 다르다는 겁니다. 하나의 MRT에 서로 다른 블랜드타입을 설정하려면 어떻게 해야할까요? 

   CDevice.cpp, IndependentBlendEnable <- 독립적인 블랜딩 스테이츠를 가능하게 할거냐.
                                           이게 그동안에 false 였어요. 이걸 만질일이 없었습니다. 이게 false면 0번 텍스처 설정만 적어줘도 나머지 모든 텍스처에 이 0번설정을 쓰게됩니다. 
                                           렌더타겟이 최대 8개 설정가능하니, 하나의 블랜드타입 설정으로 최대 8개의 렌더타겟이 그 설정을 자동으로 공유하는거죠 굳이 코드로 명시안해도.
                                           반면에 이 값이 true라면 MRT에 있는 모든 텍스처 설정을 개수만큼 일일히 다 적어줘야합니다. 

                                           데칼 MRT에 속한 두 텍스처의 블랜드 설정이 달라야 하기 때문에, 이제는 데칼의 블랜드 타입을 새로 정의하고 적어줄 필요가 있는겁니다.

   데칼의 알파 설정을 위해서 0번, 1번 타겟에 블랜딩 스테이츠를 다르게 설정하고 코딩했습니다.
   이 설정을 BS_TYPE::DECAL 로 남겨둡니다.

 - 머지머터리얼에 데칼재질 세팅 안해놨었음 TEX_3

 - decal.fx
  - output.vEmission에 마젠타 색깔로 sv_target에 전달. 이제 빛으로 취급됨
    그리고 출력했더니 그림이 그려진 부분만 빛으로 취급되야 되는데 비어있는 부분까지 색깔이 다 나오네?
    이건 빛을 고정값으로 넣어줘서 그렇네요 그러면 이미지 모양대로 빛이 들어가게 빛 고정값을 넣지말고
    추출한 색과 알파값을 곱해서 색을 설정할게요.

 - 데칼 클래스에 m_bAsLight라는 bool로 이 데칼이 빛데칼인지 일반데칼인지 구별하게 할게요.
   요 옵션값을 재질에 전달시켜서 쉐이더에서 데칼을 빛으로 처리 할지 아닐지 if문으로 결정합니다.

   Emissive가 아니면 그냥 표면에 덮여져서 그려지고요, Emissive면 빛으로 처리되서 더 밝아져서 그려지겠죠.

   g_int_0이 바로 그 bool값입니다. 이게 true면 Emissive SV_Target에 값 넣어줍니다.

 - CDecal::UpdateData()에
   INT_0에 bool 값 바인딩. 


 여기까지 데칼 끝났습니다.


 정리 : 1) 데칼 볼륨메쉬의 영역체크 완료.
        2) 적합한 영역에 텍스처 매핑 완료.
        
        3) 데칼 전용 blend state 만들어서 Emissive 데칼인 경우까지 대응 가능하도록 함.
           컬러타겟은 알파블랜드 인데 이미시브타켓은 빛의 누적을 위해 원원블랜드를 써야하기때문
          
           데칼이 Emissive일때는 플래그값을 통해 추가적인 작업을 합니다. 그거은,
           본인의 색깔과 알파값을 곱한 최종 색상을 SV_Target1 에 전달하는 겁니다.
           SV_Target1은 빛텍스처이고, 그러면 데칼이 빛연산에 영향을 받아 빛처럼 취급받게 됩니다.






205
==================================================================================


 - 오류 수정 시간

 (1) 스카이박스 사라짐 현상
  - 디퍼드 MRT는 메인카메라가 해야되거든요? 그런데 UI카메라도 렌더링하잖아요. 디퍼드 렌더링끝났는데 라이팅연산을 또하고있네요.
    UI 카메라는 포워드 렌더링만 해야되는데 디퍼드 데칼 라이팅 같은 작업도 다 하고있잖아요 render()함수 내에서. 
    이러면 카메라 render()에서 이 부분들을 렌더매니저의 render_play()로 이관합시다. 
    메인카메라는 0번카메라죠?
    만약 카메라가 하나도 없으면 return 해버리고
    0번 카메라가 존재할때는 앞서 끌고왔던 디퍼드 데칼 라이팅 렌더링 해줍니다.

  - 카메라가 그동안 렌더링 했던 과정들을 외부에서 호출해야되니까 일일히 함수들 다 만들어줍니다.
    render_deferred() 등등

    그리고 나서, 렌더매니저에서 도메인에 따른 분류를 해서 그리는 코드를 적어줍니다. 원래는 카메라에서 했었쬬?
    도메인에 따른 렌더는 실질적으로 카메라에서 하긴하지만, 그걸 최초로 호출시켜주는 애는 렌더매니저인거죠.

    광원만큼은 렌더매니저가 광원정보를 직접갖고있기 때문에 카메라보고 요청하지 않고 직접 수행합니다. 사실 코드는 비슷하죠.

    귀찮으니까 기존 포워드 렌더 관련 함수들은 render_forword()에 다 때려박을게요 굳이 함수 구분하지 말고 합쳐서..
    Opaque, transparent 같은 애들.

    마지막으로 후처리까지 하면 메인카메라 한 사이클 끝.

  - 메인카메라 렌더링 끝났으면, 나머지 카메라의 포워드 렌더링을 수행시킵니다.
    선생님왈, 메인카메라 외에 다른 카메라들은 포워드 렌더링만 하는게 맞다고하네요 데칼이런건 메인에서만 하는거라고.

  - 여기까지가 총괄 렌더링 한 싸이클돌린겁니다.


  - 에디터 카메라도 수정해야죠.
    에디터 모드에서 얘는 어차피 카메라 하나기 때문에 그냥 앞에 메인카메라 과정과 동일한 코드를 복붙합니다.


  - 왜 스카이박스가 안생겼냐면 보조 카메라가 메인카메라랑 동일한 렌더 과정을 거치면서 라이팅연산에 뭐 잘못된걸 한거같다고 추측. 실질적인 디버그는 안하심 직접 수치보시면서 하는 하드코딩..
    그냥 렌더 구조 바꾸고 어 되네? 이러시고 추측으로 빛연산을 지목하심
    메인카메라와 서브카메라 렌더방식을 구분시키니까 해결이 됬다.

 (2) c++ 버전 17로 업그레이드
  - global.h 에 파일시스템 뭐시기 코드 바꿈

-----------------------------------------------------------------------------------

 - 이제 그림자를 구현해봅시다.
   그림자가 중요한 이유는, 물체가 카메라로부터 얼마나 멀리 있는지 가까이 있는지 원근감을 주기때문이다.
   그림자가 없는 게임은 어색해 보인다. 하지만 그림자는 연산이 엄청('드럽게'란 표현을 쓰심) 많이든다고 한다.
   왜 많이 드냐? 
   원래 디퍼드 연산에서 어떤 물체의 디렉셔널 라이트 렌더링 한다고 생각해보자. 
   그림자 고려 안했을떄, 그냥 광원에 100퍼센트 영향을 받아서 색깔을 결정한다.
   하지만 그림자 구현한다고 했을때, 광원과 나 사이에 물체가 뭔가 있으면 빛 세기가 감소해야되고, 그 물체가 있는지 없는지 까지 알아내야한다.
   이 작업이 연산이 드럽게 많이든다.

   그럼 그림자 구현 이론을 알아보자.
   광원시점에서 물체를 내려다 볼때의 물체들의 깊이값을 미리 저장해놓는다. 
   그 다음, 어떤 픽셀을 그리고자 할때 카메라 시점의 뷰프로젝트 연산을 하기전에 해당픽셀을 광원시점에서의 뷰프로젝트 행렬로 투영시켰을때에 그 픽셀에 깊이값이 뭔가 있었다면
   그 픽셀은 어떤 물체로 막혀있었다는 말이다.

   디렉셔널 시점에서 물체들의 깊이값을 미리 저장해놓고,
   실제 렌더링 할떄 어떤 픽셀을 렌더링하기 전에 그 픽셀을 디렉셔널 광원 시점에서의 뷰프로젝션으로 투영해놓고,
   그 픽셀 위치와 미리저장한 깊이값 화면의 동일한 위치에 대응시켜서 깊이값이 존재했다면 이 픽셀은 그림자 영역에 있는 것이다.

   이거는 물체가 고정일때는 되는데 물체가 움직이면 그림자를 좀 다르게 처리해야한다.




















206