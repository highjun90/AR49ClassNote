 - 카메라에서 렌더링할, 디퍼드로 분류되는 애들을 먼저 그린다고 했죠. 
   도메인이 디퍼드로 설정된 오브젝트들은 쉐이더 자체가 출력 타겟이 4개로 설정되어 있기에 
   오브젝트의 도메인을 잘 설정해줘야 합니다.

   이렇게 디퍼드 MRT를 먼저 값 설정이 완료되면, 다음단계로 Lighting MRT로 변경하고,
   거기에 이전 디퍼드 MRT에 기록된 정보를 이용해서 Lighting MRT의 렌더타겟들에 값을 채웁니다.

   마지막으로 Merge 단계를 거칩니다.


   포인트 라이팅쪽을 제가 오늘 수업에 할거니까 스포트 라이트를 여러분들이 하세요.
   포인트 라이트에서 고려해야될거 - 볼륨.
   광원이 있는 영역자체를 그렸다기 보다는 영역에 갖다댈 물체가 있는지 검사하는거죠.
   광원의 메쉬인 스피어 공간 내에 포지션 타겟의 정보와 비교해서, 겹치는 영역에만 색을 그리는겁니다.
   당연히 겹치는 부분이 없는 광원의 스피어 영역은 버려지겠죠.

   이전에 디렉셔널 라이트 일때는 그냥 렉트메쉬써서 픽셀 전체영역 검사했죠. 
   포인트 라이트는 문제가 있습니다. 얘는 3차원 적으로 생각해야해요

   땅이있다고 칩시다. 포인트라이트가 땅 표면의 중심 위에 있다고 해볼게요.
   그럼 포인트라이트의 스피어메쉬는 어떻게 그려져야합니까? 스피어 전체영역이 다 그려져야 합니까?

   아닙니다. 딱 평면하나만 그려져야 합니다. 그런데 호출된 볼륨메쉬 전체에 대해서 픽쉘쉐이더 다 호출시켜서 계산한다고 해결되는게 아니고,
   픽쉘쉐이더 호출해서, 호출된 모든 픽셀쉐이더에 포지션을 가져와보면 다 무슨 값이 있어요. 그래서 뭐가 있네? 이러면서 그리면 안된다고요
   2차적으로 진짜 얘가 광원 스피어영역 안에 속해있는 놈인지 여부를 체크해야합니다. 

   그 방법은 크게 2가지가 있습니다. 
   1) 스텐실. 우리가 매번 스텐실 거리는데 실제로 스텐실 활용해본적이없죠
   2) 디퍼드 MRT에서 남은 정보를 활용한다.

   쉬운거부터 해봅시다.

   실제 구 스피어 영역에 있는지 따져봐야 합니다. 어떻게 해야할까?
   CLight3D::finaltick()에서 트랜스폼의 위치값이 실제 3D공간에서의 위치죠? 트랜스폼에서 계산한 나의 정보를 매번 갱신하죠?
   그리고 Light3D에서 본인의 반지름을 가지고있죠? Light가 반대로 트렌스폼에 자신의 반지름 정보를 알려줍니다. 이건 언제만 할거냐? 광원타입이 포인트인 경우에만 합니다.
   그래야 볼륨메쉬 배치할때 트랜스폼이 계산한 월드로 본인의 영역을 계산하겠쬬.
   예시로, 반지름이 500이라면 지름은 1000이죠? 그래서 SetRelativeScale()에서 반지름의 2배값을 전달해줍니다. 반지름의 2배를 본인의 스케일로 잡는겁니다.
   이렇게 설정해줘야 빛의 트랜스폼에서 볼륨메쉬(스피어메쉬)를 배치시킬 수 있습니다.

   애초에 구는 로컬스페이스에 있었겠죠 그다음 월드 뷰 투영까지 와서 픽쉘쉐이더가 호출됬겠죠. 
   우리는 구의 윗부분의 UV값으로 포지션타겟에 값을 가져왔다고 칩시다. 그럼 애가 진짜 구의 영역내에 존재하는 놈인지 확인하려면 프로젝션 상태에서 꺼꾸로 로컬로 돌아가서 검사하는 겁니다.

   구는 반지름 0.5짜리 정점으로 돌아가갰죠? 검사하는 픽셀이 똑같은 과정을 거쳐서 구의 스페이스 영역에 끌고 왔을때도 영역내에 있는지 검사하면 되는겁니다.

   구의 원점에서 검사하는 픽셀 사이 거리가 0.5 이상이면 광원의 영향을 안받는 것이고, 0.5 이하면 광원의 영향을 받는겁니다.

   이렇게 하는 이유는 판정조건이 항상 동일하기 때문이에요. 추가적인 계산이나 그로인한 여러 정보가 필요 없는거죠

   이해를 위해서 볼륨메쉬가 큐브일때를 생각해보세요 만약에 우리 광원이 스피어가 아니라 큐브였다면? 그걸 생각해보세요.
   얘는 로컬스페이스로 끌고갈때 xyz축 어디 한축이라도 벗어나 있으면 광원 밖에있는 앱니다. 
   땅이 큐브영역에 들어있는 위치. 

   
             [-----------------]
   ----------[-----------------]-------------
             [-----------------]

  실제 광원에 들어와 있는 영역은 두번쨰 [-----------------] 인데, 포인트텍스쳐에서는 위, 아래 [-----------------] 까지 겹쳐있게 됩니다 근데 얘가 실제로 광원의 영역에 있는앱니까?
  아니죠 광원 너머에 있는게 투영효과 때문에 겹쳐서 화면에 보이는 거잖아요 이런 애들을 광원영역에 없는 걸로 판정해야해요. 
  그런데 포지션텍스처 값과 큐브메쉬 영역만 갖고 픽셀쉐이더에서 계산하려하면 그냥 광원에 있는걸로 계산해야되죠 이건 우리가 원하는 결과가 아닙니다.
  그래서 보이는 화면이 기준이 되면 안되고, 실제 포지션 값으로 영역판정을 해야 된다는 말입니다. 볼륨메쉬가 스피어일때도 마찬가지였던거죠.


  이 방법은 장단점이 있습니다.
  장점
  연산이 빨라요. 볼륨메쉬 내부에 체크판정하는게 빠릅니다. 왜냐면 즉시 한번에 검사할수 있어요. 원패스로. 픽셀이 이 볼륨메쉬 영역에 있는지 바로 검사할수 있어요.
  단점
  볼륨메쉬가 되게 특징이 있어요. 어떤 볼륨메쉬를 사용했느냐에 따라 메쉬 형태에 맞춰서 검사 방법을 일일히 다 고려해야합니다.
  그런데 볼륨메쉬가 엄청 복잡하거나 규칙이 없는 메쉬면 쓸수 없겠죠?


 - 2번째 방법 스텐실 버퍼.
  얘는 장단점이 1번째랑 딱 반대겠ㅈ?
   장점 - 볼륨메쉬 도형이 어떤 모양이던 상관없음
   단점 - 연산이 좀 더 많이 필요.

  자 예시로 이 방법을 설명해봅시다.
  어떤 평면이 있고, 어떤 인물이 있다고 합시다. 두 영역이 겹쳐있을떄 그 부분만 특정 색상으로 변화하는 효과를 주고싶어요
  이떄 첫번쨰 방법으론 이걸 처리 못해요 인물 메쉬 자체가 너무 복잡하고 규칙도 없기 때문에 평면의 포지션과 인물의 포지션을 로컬스페이스로 끌고가서 영역판정을 계산할 수식을 세울수가 없습니다.
  이 상황은 바로 스텐실 버퍼를 이용해야합니다.


 - CCamera.cpp
  - m_MatProjInv 라는 애를 추가해서 투영행렬의 역행렬을 미리 정의. 월드역행렬도 똑같이 추가.

 - struct.h에서 미리 선언했던
  - g_Transform.matViewInv 와 월드Inv 까지
    CCamera::render()에 미리 구해 놓습니다. 
    동시에 관련 get함수도 정의해놓구요

 - CLight3D::render()
  - 광원타입이 포인트일떄,
    matVWInv를 MAT_0 슬롯에 넣어서 쉐이더에 전달합니다. 스포트라이트도 마찬가지겠죠?
    matVWInv로 본인의 투영좌표에서 로컬좌표로 다시 돌아가게 하는 역행렬세트입니다.
    (로컬x월드x뷰 = 뷰포지션을 로컬로 돌려놓으려면 뷰포지션 x 뷰역행렬 x 월드역행렬 해야함
     이때 뷰역행렬 x 월드역행렬 이 바로 matVWInv 임)

 - light.fx
  - g_mat_0 이 추가적으로 들어오게 됬습니다 MAT_0 슬롯이었쬬?
    PS_PointLight() 쉐이더 함수는 그냥 디렉셔널 쉐이더 함수 그대로 복사해서 코드 수정할게요

 그전에
 - CAssetMgr_init.cpp에서
   포인트라이트 쉐이더와 재질을 정의합니다.

  - CLight3D::render()에서
   INT_0에 바인딩 하는 부분은 광원 모든타입에 공통 적용되네요 그냥 if문 밖으로 빼겠습니다.
   그리고 UpdateData() render()도 타입 상관없이 똑같이 해주는 거니 얘도 if 밖으로 뺄게요
   결과적으로 디렉셔널 라이트 단독으로 하는게 없네요 그냥 디렉셔널라이트 일때 따로 처리한다는 개념은 코드상에서 안보이게 되네요
   그리고 차라리 if문으로 디렉셔녈 라이트가 아닐때 역행렬 바인딩하는 코드를 추가했습니다.


 정리 - 디렉셔널 라이트가 아닌광원은, 디렉셔널 광원일때처럼 단순히 포지션텍스처와 메쉬를 통해 그리기 판정하는건 오류가 있다.
        무슨오류? 투영처리 때문에 볼륨메쉬의 영역에 포지션텍스처의 값이 겹치는 영역이 존재하는데, 이때 실제적으로 겹치진 않는데 그리기 처리를 하면안되고 실질적인 위치가 겹치는 영역만 그려야한다.
        이 오류를 해결하려면? 디렉셔널라이트처럼 '보이는 볼륨메쉬 영역에 단순히 포지션텍스처 값이 겹치는지만 검사' 해서는 안되고, 실질적인 위치값으로 정말 광원과 픽셀의 포지션이 겹친는지 계산해야함

        그럼 새로운 방법은 무엇인가? 2가지가 존재
        1) 볼륨메쉬를 자신의 로컬스페이스로 돌려보내고, 검사할 픽셀의 포지션 역시 광원의 볼륨메쉬의 로컬영역으로 끌고 들어와서 픽셀의 포지션이 광원 영역 내에 존재하는지 검사.
           장점 - 연산이 빠름
           단점 - 볼륨메쉬가 복잡하면 픽셀 포지션이 광원 영역내에 존재하는지 검사를 하는 수식을 세울수가 없음. + 도형이 간단하더라도, 도형이 달라지면 도형에 맞춰서 수식을 일일히 적용해야함
        2) 깊이스텐실을 이용하는 방법 
           장점 - 볼륨메쉬 복잡해도 상관없이 모두 검사할 수 있음
           단점 - 연산이 좀더 많이 필요.
         
      

201
=======================================================================================

 - light.fx, VS_PointLight()
  - 볼륨메쉬 pos에 WVP 행렬을 곱해서 픽셀영역에 전달. 이 영역이 바로 빛계산할 영역.

 - 다시 말하지만, 프로젝션까지 처리한 볼륨메쉬영역에 포지션 텍스처 값 고대로 가져와서 검사하면 안된다. 마치 광원 스피어영역 내에 있는걸로 위장한놈을 걸러내는 작업이 필요하다고 1교시 내내 설명했죠?
   픽셀쉐이더에서 그걸 걸러내는 코드를 꼭 짜줘야합니다.

 - 픽쉘쉐이더.
   픽셀쉐이더에서 들어오는 xy값은 픽셀상의 좌표라고 했죠 포스트프로세싱할떄 헀습니다.
   이게 필요한 이유는 디렉셔널일때는 렉트메쉬니까 UV값은 화면 전체에 대응하는거 가져오면 됬죠 지금은 그게 안되기 때문에 수동으로 현재 검사할 픽셀의 UV값을 따로 계산해서 포스트텍스처에 그 UV에
   대응하는 값을 가져와야합니다.   <- 더 정확한 이해가 필요 UV값으로 포스트텍스처 값을 불러와야된다는건 이해했는데 디렉셔널라이트 일때 어떻게 포스트텍스처의 값을 가져왔는지 확인할것.   
                                   && 확인결과) 디렉셔널 라이트 일때는 그냥 본인 정점의 UV값이 곧 픽셀의 UV값이 되는걸 확인. 렉트메쉬니까 알아서 보간된 UV값이 픽셀쉐이더로 전달된다.
                                      그리고 이때 그 UV값 설정 전에, vPos를 2배로 해주는 작업이 있었음 이는 곧 메쉬를 화면 전체로 덮어버리는 것과 동일한 효과다. 정점의 좌표가 0.5였으니까
                                      1로 확장해서 로컬상에서는 메쉬가 화면 전체를 덮게되는 효과를 노린거임 이렇게 되면 렉트메쉬는 동일한 해상도를 가졌을 포스트텍스처와 일대일로 대응하게됨
                                      둘다 화면과 동일한 해상도를 가졌다.

                                      반면 렉트메쉬를 쓰지않는 포인트라이트 같은경우에는, 광원의 볼륨메쉬의 한 픽셀이 전체 화면에서 어떤 UV에 대응되는지 바로 알 방법이 없다.
                                      그렇기 때문에, 투영행렬처리까지 한 볼륨메쉬가 픽셀좌표를 통해서 간접적으로 UV값을 알아내고, 그 UV값으로 포지션텍스처의 값을 가져오는 것이다.
                                      픽셀좌표가 곧 화면상에서의 픽셀 위치라는걸 응용해서 UV값을 도출하는 것이다.

   호출된 픽셀 위치를 정확하게 알고, 거기에 대응되는 UV값을 도출해서, 그 UV값으로 포지션텍스처에서 값을 가져오는 겁니다.
   _in.vPosition.xy가 바로 그 픽셀위치죠.
   vScreenUV = _in.vPosition.xy / g_RenderResolution   <- 이렇게 해서 화면상에서 대응하는 UV값을 도출한겁니다.

   g_tex_0(포지션텍스처)를 앞서구한 UV값 vScreenUV로 샘플링해서 포지션 값 가져옵니다.

   자 우선 스피어 영역과 포지션 값이 안겹치면 생각할 필요도 없어요 바로 discard합니다.
   자 다음단계로 설령 스피어 영역과 포지션값이 겹쳐있다 하더라도 실제로 겹치는지 검사를 해야한다고 1교시떄 설명했어요. 어떻게? 실제 포지션값으로 검사를 해야한다고요.
   스피어 메쉬의 로컬공간으로 현재 검사하는 픽셀포지션을 끌고 와서, 스피어 메쉬의 포지션과 픽셀포지션 사이의 거리값을 계산하면 광원영역에 존재하는 픽셀인지 확인할수 있어요.

   vLocal이 픽셀포지션(vViewPos)을 로컬로 끌고온 결과값입니다.
   if 문으로 length(vLocal)이 0.5 이상이면 이 픽셀은 스피어영역 밖에 존재했던 놈이니까 그려지면 안되요.바로 discard 해버립니다.

- 이렇게 코드 구현해서 정말 잘 동작하는지 확인해보죠.

  광원타입을 포인트 라이트로 바꾸고요 반지름 500으로 낮출게요. 위치는 원점에서 뒤로 500 밀게요

  그리고 빛 받을 물체가 있어야 되는데 랙트메쉬로 하고요 크기는 가로세로 2000으로하고요 x축으로 90도 회전해놓고요 위치는 아래로 200, 뒤로 500 미룹니다.

  결과보면 스피어광원 아래쪽을 평면이 가로로 갈라놓아서 있죠 이때 우리가 원하는 결과는, 그 가로지른 부분의 면만 보이게 하는 겁니다. 자 사전설계는 이제 끝났고 이걸 우리가 원하는 결과로
  나오게 적용시켜봅시다.

- 아예 걸러지는 곳을 안보이게 discard 하지말고 오히려 색을 넣읍시다 의도한대로 됬는지 확인하려고. 빨간색으로 할게요
  그리고 겹치긴 하는데 그려져선 안되는 영역은 파란색으로 하고요
  정상적으로 내부라고 광원에 영향을 받는 영역은 초록색으로 하겠습니다.

  이렇게 스피어 메쉬가 어떻게 그려질지 설정했어요. 광원이 어떻게 그려질지 봅시다.

 && 오류가 있어요 라이트렌더링할떄 본인의 월드정보를 넘겼어야죠 CLight::render()에서 Transform()->UpdateData() 추가해줬어요.
    이거 안해줬을때는 남의 것 같다 썼을거에요 그래서 다른 물체 없을때는 정상적으로 출력됬는데 어떤 물체를 함꼐 렌더링할땐 그 물체에 맞춰서 변형되서 출력된겁니다.
    => 요거 엄청 오래 걸렸는데 학생이 알려줘서서 고치심

 - 자 다시 출력했을때 DiffuseTargetTex 를 imgui 확인해보면 3색깔 나오게 되있죠 영역체크 잘됩니다.


 네일은 이걸로 데칼까지 구현해볼게요




202