
 - CSkyBox.cpp에서
   UpdateData() 에서 본인의 스카이박스 타입값을 쉐이더에 전달해 놓을게요.

   이걸 왜 전달하느냐?
   
   스카이박스 쉐이더에서 사용하려고.
   큐브텍스처만 유일하게 방향벡터로 UV값을 지정하거든요? 
   정점의 로컬스페이스 좌표 그 자체가 방향벡터이고 그걸로 UV값으로 이용한다.

   큐브의 픽셀 위치가 곧 UV값이 되는거죠

   근데 얘는 회전을 안했죠? 

   왜그러냐?

   스카이박스 중앙에 내가 있고 스카이박스 어딘가를 처다볼텐데

   UV는 회전을 하면안됩니다. UV값 자체는 회전이랑 상관없으니까 회전을 적용하면 안되요.
   내가 참조하려는 그곳의 위치값은 동일하기 때문에 회전하건말건 로컬스페이스 상에서 회전하기 전의 방향벡터는 회전 안시키는거죠
   즉 샘플링할 장소는 바뀌지 않는데 회전을 적용시켜버리면 엉뚱한 곳을 샘플링할겁니다.

   ?? 정확히 뭔 이야긴지 이해 못했어.. 
     


   자 그 걸과를보면
   큐브메쉬라는 느낌이 안들죠?
   왜냐면 z값을 다 1로 세팅했기때문이에요 텍스처를 다 평면에 펴 발랐다는 느낌? 식빵에 잼 바르듯.. 그래서 마치 원처럼 느껴집니다.



 - 스피어 스카이 박스의 단점이 뭐냐면  사각형 한장이 구에 매핑되게 하려고 했는데
   원의 위에서 아래로 갈수록 점점 넓어지면서 스피어메쉬 둘레의 길이가 늘어니는데 정작 그려질 사각형 공간은 길이가 일정하죠?
   그러면 스카이박스 맨위나 아래가 막 소용돌이 치는 모습으로 나와요 막 한 점으로 압축되어 빨려들어가는 왜곡이 보여서 따로 연산을 추가해야되는데 전 안할거에요.
   그런 현상때문에 큐브타입의 스카이박스가 자연스러울겁니다.



 - skybox.fx, PS_SkyBox()
  - if문이 뭐이리 많아?

   -  if( 0 == g_int_0)                                         => 스카이박스가 스피어타입이고
        if (g_btex_0)                                           => 텍스쳐가 세팅되어 있으면
            vOutColor = g_tex_0.Sample(g_sam_0, _in.vUV);       => 텍스처를 메쉬에 샘플링
    
    
    else if(1 == g_int_0)                                       => 스카이박스가 큐브타입이고
        if(g_btexcube_0)                                        => 텍스쳐가 세팅되어 있으면
            float3 vUV = normalize(_in.vUV_Dir);                => 텍스처를 UV값을 바탕으로 샘플링.
            vOutColor = g_texcube_0.Sample(g_sam_0, vUV);
  

여기까지가 스카이박스.
--------------------

 - 이제 멀티렌더타겟 시스템 해봅시다.
   우리는 디바이스에서 렌더타겟 하나만 쓰고있조? 

   에셋에 미리 렌더타겟과 깊이스텐실 텍스처를 에셋으로 들고잇고,
   렌더매니저가 그걸 에셋에서 불러와서 tick()에서 CONTEXT보고 OMSetRenderTargets()함수로 렌더타켓으로 지정하고,
   Clear 하는 구조에요.

 - 다이렉트 11은 최대 8장까지 렌더타켓을 지정할수 있습니다. 우리는 현재 하나만 지정하고있고요.
   다만, 렌더타켓을 최대 8개 지정할수 있지만, 깊이텍스처는 오직 하나만 존재합니다 최대 한개라구요.

 - 저는 새로운 렌더타켓 구조를 클래스로 새로 만들거에요.
  - RenderMgr필터 밑에 MRT(멀티렌더타겟) 이라는 필터를 만들고, 그 아래에 CMRT 클래스를 만듭니다.

 - CMRT 클래스
  - 렌더타켓 텍스처 포인터배열을 크기 8개로 맴버로 가짐 m_arrRTTex[8] 
    깊이 텍스처 한개를 맴버로 가짐.

  - 자이제 기존의 렌더타겟 한장과 깊이텍스처 한장을 새로만든 MRT에 이식하는 작업을 해볼꺼에요 그래도 결과는 전혀 달라지지 않겠죠.
   - Create()함수
    - 인자로 렌더타겟 포인터배열과 렌더타겟 개수, 깊이텍스처를 주면 그걸 본인의 맴버로 세팅해서 가지게 됩니다.
   - MRT는 렌더매니저 초기화 할때 초기화 해줄거에요
    - CreateMRT()
     - 자 원래 스왑체인이 가진 텍스처를 우리 에셋매니저의 텍스처로 교체해서 에셋에 저장해 놓고있었죠? 즉, 에셋이 가진 렌더타겟은 원래 스왑체인거였다.
       따라서 스왑체인으로부터 텍스처를 가져와야 겠죠

       스왑체인 MRT를 만들어 봅시다
       에셋에서 렌더타겟, 깊이텍스처 하나 불러와서 

       이렇게하면 이제 렌더타켓 매니저 tick()에서 MRT로 직접 OMSet()해줍시다 컨텍스트보고 하라고 하지 말고. 구조를 바꾼거죠 원래는 에셋매니저에서 텍스처 가져와서 컨텍스트보고 세팅하라 했는데
       이제는 MRT보고 세팅하라는겁니다. 아직 OMset()함수 구현 안해서 아무거도 안보일거에요 2교시에 구현해봅시다.




 - enum class 로 MRT의 여러 타입을 지정한다
   렌더매니저에서도 타입 개수만큼 CMRT를 포인터배열맴버로 들고있는다.
   우선은 스왑체인 타입의 MRT를 만들자.
   

 - MRT 타입은 deferred, light, shadow_depth 등등 종류도 많다. 각 렌더타켓의 개수와 깊이스텐실 개수는 코드에서 확인해보라.
   우리는 지금까지 스왑체인 MRT에 다 때려박아서 그렸는데 앞으로는 전혀 다른 MRT에다 물체를 그릴수있는 겁니다.


   



195
=============================================================================

 - CMRT.cpp, Create()함수.
  - 인자로 준 _RTCount 만큼 m_RTCount에 저장. 참 똑똑한게 m_RTCount를 반복문에 쓰면서 동시에 자연스레 CMRT 본인이 가진 렌더타겟의 개수까지 저장한다. 
    비록 렌더타겟을 총 8까지 저장할 공간은 있지만 실제로 본인이 가진 렌더타겟 개수를 저장할 필요가 있었기에 m_RTCount를 맴버로 가지는것.

 - 이런 구조로 바뀌면 확장성을 가지게 됩니다. 여러 렌더방식을 갖게된거에요.


 - 여기까지 스왑체인 MRT를 만들었으니 Deferred MTR를 만들어 봅시다.

 - Deferred MRT는 총 5장의 MRT를 가지고 있어요(초반에는 4장 5장 으로 충분한데 나중에 수업하다보면 6 장으로 늘어날 수도 있다.)
 - 스왑체인 MRT처럼, RenderMgr_init.cpp에 Deferred MRT를 정의합니다.
 - 이제는 진짜 스왑체인에서 텍스처 얻어오는것도 아니고 진짜 내가 일일히 다 만들어 줘야합니다.
  - 우선 텍스처 해상도가 필요해요 그래야 메모리상에서 얼마만큼의 공간만큼 존재할지 지정할수 있으니까.
  - 우선 pRTTex[4]로 에셋매니저에 CreateTexture()하는 동시에 초기화 합니다.
    (코딩기법이 진짜 군더더기 없긴한데 다르게 말하면 너무 기계친화적임.. 설명 안듣고 그냥 보면 왜 이렇게 짰는지 의도 파악하느리 힘들수도 있겠음)
    (나같으면 에셋매니저에 미리 텍스처 만들어 놓고 불어오게 할텐데 그냥 렌더매니저에 노빠꾸로 새로운 텍스처 만들고 지역변수 포인터배열에 저장시켜 버림;)
   - 우선 첫번째 텍스처 "ColorTargetTex"에서 맨 마지막 텍스처의 플래그 값을 보세요. OR 비트연산자로 렌더타겟, 쉐이더 리소스 두개 설정되어있죠?
     아니 왜 용도가 두개임? 이럴 수 있는데 원래는 쉐이더 리소스로 쓰이는게 정상인데, 내가 가끔 디버그하다가 내가 뭘 그렸는지 확인하고싶어. 그럴땐 랜더타겟으로 지정해서
     화면에 띄워서 그려진거 확인하는거죠. 그래서 플래그가 2개설정되어있는겁니다.
   - 두번째 텍스처. 얘는 네번째 플래그 설정 잘보세요. 첫번째 텍스처는 RGB 8비트로 초기화 해줬는데 우리 예전에 한번 봤었죠 RGB에 위치값이나 벡터값저장할수 있는거.
     즉 RGB 데이터 공간에 위치값을 저장할겁니다. 근데 8비트론 택도 없어요 적어도 한 좌표축에 32비트 정도 할당해줘야 좌표값 표현이 가능합니다. 
   - 세번째 텍스처는 방향벡터인데 얘도 8비트 공간 갖곤 쪼끔 불안하다고 합니다 그래서 더 키워줍니다.


 - OMSet()함수
  - 우리는 무조건 MRT에서 깊이 텍스처가 null이 없다고 가정하고 context보고 OM 세팅해달라고 할게요 그게 더 직관적이여서 그래요.
    다르게 말하면 MRT 세팅할땐 무조건 깊이 텍스처 세팅을 해야된다는 소리죠.

 - MRT 구조를 구현 하다보니, 이제 Device가 렌더타겟과 깊이텍스처 포인터를 맴버로 가질 이유도 없고 그걸 클리어 하는 작업도 할 필요가 없어요 그 기능은 이제 다른데로 옳길겁니다.
   원래는 디바이스가 스왑체인의 렌더타겟과 깊이텍스처를 클리어 해줬는데 이젠 우리가 스왑체인 MRT만 쓰는게 아니잖아요. 그럼 이제 관련 작업을 딴데서 해야죠.
   렌더매니저가 색상클리어해주는 clear()작업을 tick() 시작할때 해주면 됩니다.
   - CMRT클래스, SetClearColor()함수 
    - 원하는 색깔로 렌더타겟 개수만큼 모든 렌더타겟의 색상을 그 색깔로 바꿈
   - Clear()함수
    - i번째 렌더타겟을 i번째 색깔로 클리어 해주는 함수
      깊이텍스처도 치워준다.


 - 지금은 스카이박스가 다 덮고있어서 클리어 해도 티가 안나는데 클리어 안해주면 깊이 값이 점점 쌓이면서 나중엔 렌더링이 제대로 안될수도 있습니다. 클리어는 꼭 주의 깊게 해줘야해요.


 - 랜더매니저의 ClearMRT()함수
  - 보유한 모든 MRT보고 clear()하라고 시킴.

 - SetColorClear()할때 deferred MRT 같은 경우 총 4개를 해줘야 하는데
   두번째 텍스처부터는 색깔이 아니라 막 좌표 벡터 이런걸 실질적으로 초기화 해주는 겁니다.
   첫번째 텍스처는 진짜 색상에 관한 텍스처래서 검은색(0 0 0 1) 로 초기화 하고 두번째 텍스처는 (0 0 0 0)으로 클리어 합니다.
   우리는 두번째 텍스처 부터는 클리어값으로 (0 0 0 1) 이면 실제 유효한 좌표값 같은걸로 보고,(텍스처 설정에 부합하는 유효한 값 위치면 위치 벡터면 벡터 이렇게.)
   (0 0 0 0) 이면 그냥 진짜 null같이 아무것도 아닌값으로 취급하기로 약속합니다. 
   나중에 왜 defferred MRT가 SetColorClear()하는데 왜 두번쨰 텍스처 부터는 ( 0 0 0 0 )으로 초기화 했는지 이런 약속을 사전에 모르면 알 도리가 없습니다 잘 기억해두자.







 

196