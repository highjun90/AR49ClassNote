 - 광원하기전에 기능하나 추가하겠습니다.
   광원정보를 구조화버퍼에 담아서 레지스터에 보냈는데 지금 구조화버퍼에 광원을 몇개 넣어줘서 보내줬는지 알수가 없습니다.
   예를들어 광원 10개를 담을 수 있는 구조체배열 만들어서 버퍼에 레지스터에 바인딩했는데 만약 공간은 10칸이지만 실제 사용하는 광원이 3개라면?
   지금 상황에서는 광원정보가 들어있는 버퍼가 10개짜리 크기인 것만알지 그 10개짜리 공간 안에 실제로 몇개의 광원이 있는지는 모른다.
   따라서 상수버퍼 하나를 더 전달한다. 광원이 실제적으로 몇개인지.

   tGlobaData 라는 구조체 만든다. 프로그램에 자주쓰이는 데이터를 맴버로 가지게 된다.

    1)모니터 크기가 똑같아도 픽셀게수가 다른 4k와 FHD 모니터가 잇다고 하자. 
      똑같은 게임을 돌려도 4K에 렌더링되는 픽셀수가 FHD보다 적어도 4배는 많다.
      실제 윈도우와 렌더타켓의 해상도는 다를 수 있다.
 ? 4k 모니터에 FHD로 렌더링하는 것은 뭘 뜻하는가?
   내가 궁금한건 렌더타켓 해상도는 낮고 윈도우 해상도가 높을떄 렌더타겟해상도에서 적게 렌더링해도 윈도우에 렌더링 하는 과정에서 샘플링하면서 어차피 연산은 똑같거나 비슷한거 아닌가?

      디바이스가 렌더타켓해상도를 갖고있고 윈도우객체?가 윈도우 해상도를 갖고 있다.
      실제 렌더링 대상이 되는 렌더타켓 해상도를 이 구조체가 갖게된다.(g_RenderResolution)
    2) g_dt (Delta Time)
    3) g_tiem (프로그램 시작후 실행이된 시간)
    4) g_Light2DCount (2D 광원의 개수)

 - 샘플러 옵션중에 WRAP을 했는데 UV 값 초과되는 부분은 텍스처영역을 반복해서 지정한다. 
   예시) UV값 0.9 + 0.2 면 1.1인데 1을 초과했으므로 범위 초과한 부분 다 버리고 0.1만 남음

 - 광원이 여러개면 반복문 돌면서 모든 광원에 색상 계산을 해야합니다. 하지만 일단은 광원 하나만 있다고 가정하고 나중에 여러개일 경우를 생각할거에요
   왜냐면 지금 디렉셔널 라이트인 광원만 만들었거든요

 * 포인트 라이트를 만들어보자.
  - 얘는 광원의 위치가 중요해집니다. 그 지점부터 일정 범위만 비추기 때문. 얘는 당연히 환경광은 제로가 됩니다 전체 환경이 아니라 일정 반경만 빛을 비추니까 환경광이 있으면 말이안됨.
    (점광원은 반경이 필요하고 환경광은 없지만 반대로 방향성광원은 환경광은 있고 반경이 필요없다 어차피 다비추는데.)
  - finaltick함수 에 점광원의 월드위치를 계속 갱신합니다.

  - 광원타입은  0 방향성 1 점 2 spot
    - 방향성광원일땐 본인의 색깔에 환경광(ambient)값을 곱하면된다.
    - 점광원일땐 
      1) 해당 픽셀(정점)의 월드좌표와 점광원의 월드좌표 사이 길이
      2) 점광원의 반지름(반경)
      1) 보다 2)가 크면 점광원의 영향을 받는 픽셀이다.
      점광원의 영향을 받는 경우에만 해당 픽셀의 색깔에 점광원의 색깔을 곱해서 누적을 시킨다.
      아니면 그냥 0을 곱한다.(이러면 색깔 안나옴 검은색으로 나옴 즉 점광원 범위 밖의 물체는 화면에서 사라짐)
      
      attenuation(감쇠)효과를 추가한다. 감쇠비율은 기본 1이고 (1일때 색깔이 고대로 나오고) 감쇠비율이 낮을수록 (0에 가까워질수록) 희미해진다.
      광원의 순수색깔에다가 감쇠비율을 곱한게 점광원의 영향력이된다. 즉
      정점의색깔 = 정점의색깔 x 점광원의 색깔 x 감쇠비율.

      - 감쇠비율은 어떻게 설정할까?
        (1 - 점광원으로부터의 거리 / 점광원의 반경) <- 1에서 빼는 이유는 광원의 중심에서 멀어질수록 어두워지는거기 때문이다. 
        만약 반대로 광원 중심에서 멀어질수록 밝아지는 거면 그냥 (점광원거리/반경) 일텐데 현실세계는 그렇지 않음
      
        saturate()함수로 결과가 음수 나오는 상황을 제한한다. (결과값을 0~1 사이로 고정함)

      - 지금은 밝기가 선형적으로 줄어드는데 그러지 말고 끝에 갈수록 갑자기 확 어두워 졌으면 좋겠다 -> 이게 코사인 함수랑 비슷하네?
        

 - 이제 광원이 여러개일때 만들어보자.
   해당 픽셀의 색깔 = 순수한 물체의 색 x (최종 여러개의 점광원의 색 + 환경광)

 - HLSL에서 inout 자료형은 c++의 레퍼런스임.

 - 코드가 너무 길어지니 2D광원의 색을 계산하는 전용함수를 만듭시다. 인자로 빛을 적용받는 픽셀의 위치값, 광원정보의 인덱스, 최종빛색깔의 레퍼런스(이 세번째 인자값을 직접수정하고 결과가 유지됨 그래서 함수리턴값이 void임 얘가 반환값이랑 동일한 역할로 설계.)
   

        *** 과제 ***
 - 광원의 방향이 중요. 중앙에서 거리가 멀어짐에 따라 희미해짐, 그리고 부채꼴 밖의 영역은 아예 안보임. 
   우벡터를 2d 광원의 방향으로 설정하세요
   포인트라이트와 거의 비슷합니다 수식이. 내적을 활용해보세요 각도체크하시고.
   과제폴더를 따로 만들어 놓을게요
   10초짜리, 물체 존재, 광원을 회전시키기
   obs쓰세요

 - 