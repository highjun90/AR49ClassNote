 - 아웃라이너 UI 만들면서 부모와 자식간의 관계를 바꾸는 작업을 만들고있음
 
 & UI에서 아웃라이너에서 파티클을 다른 부모의 자식으로 이동하는 상황에서 오류발생. 즉, 처음에 어떤 자식노드가 다른부모의 자식노드로 바꾸려고 dragdrop할떄 오류.
  ->부모를 끊는 과정에서 레이어가 -1로 바뀐다. 하지만 파티클은 이 레벨에서 원래 레이버 3번에 속해있었고 이 정보가 유지 되었어야한다. 
    따라서 Addchild()함수를 조금 수정한다. 만약 child가 어떤 레이어에 속해있지 않았다면 부모의 레이어로 지정해주고, 원래 레이어가 있던 놈이라면 그 레이어로 지정해준다.

 & 지금은 한 레벨안에서만 이루어지기 때문에 무조건 어떤 레벨에 속해있었다는걸 가정했지만 나중에 어떤 오브젝트를 스폰시키자마자 바로 누구의 자식으로 들어가야하는 경우는
   레이어값이 -1인 상태일 것이다.(레벨에 속해있었다면 어떤 레이어값을 갖고있었을 것) CGameObject.cpp의 AddChild() 함수는 이제 if문의 경우가 3가지가 됬다.
   처음 if는 인자로준 자식의 레이어값이 -1인가? -> -1이었다면 이 레벨에 속한놈이 아니었고, 따라서 부모의 레이어값을 지정해준다.
   다음 else if는 최상단 오브젝트였을경우.
   마지막 else는 어떤 부모가 있었던 오브젝트였을경우.

 - IsAncestor()함수
  - 인자로 준 오브젝트가 나의 부모쪽 오브젝트였다면 true, 최상단 오브젝트 까지 검사했는데도 부모쪽 오브젝트가 아니었다면 false. 반복문 돌면서 부모가 null 인 오브젝트까지 추적함.

 * AirDrop 에어드랍? dragdrop할때 잘못된 drop을 하는 경우를 말하는듯?


------ 에셋 UI중 머터리얼 UI의 세부내용을 구현하자

 - Content UI에서 머터리얼을 누르면 인스펙터에 관련 정보를 띄워줘서 런타임 도중 머터리얼에 세팅되어지는 여러 값들을 수정하도록 만드는 구조를 짤것이다

 - 머터리얼UI와 텍스처 UI에 텍스처 이미지 출력하는 부분은 코드가 비슷함 복붙해서 살짝 만짐

 & 근데 재질UI 만지다가 재질은 텍스처처럼 경로가 없고 코드상에서만 존재햇다면서 동적 재질 구조 옛날에 안만들고 넘어간거 아쉬워했고 그래서 재질 구조 끝을본다함.

 - AddAsset()함수의 첫번째인자로 문자열을 키값으로 지정했는데 나중엔 경로를 키값으로 준다함. 즉 방식이 2가지가 되는거임. 현재는 그냥 문자열을 키값으로 주는상태. 
   이경우는 예를들어 재질 생성시 키값으로 문자열을 주는데 이러면 엔진프로그램의 메모리상에서 재질정보가 생기고 프로그램 종료되면 사라짐.
   반면 앞으로 새로만들 구조는 첫번째 인자로 문자열이 아니라 경로를 키값으로 주는데 이건 진짜 파일시스템에 재질정보를 저장하고 불러올수가 있음. 휘발성이아님
   사용하려면 최초엔 메모리상에 만들고 파일에 저장하고, 두번째부턴 파일시스템에서 로드함
   content파일의 material 파일에 저장시킨다.

 - 최초에는 머터리얼 폴더가 텅 비어있고, 메모리상에서 재질을 만들고 그걸 머터리얼 파일에 저장한다. 두번째 부터는 머터리얼 폴더 내에 이미 재질이 있어서 새로 만들지 않고
   그냥 만들어진 재질을 머터리얼 폴더에서 로드한다. 
   머터리얼을 만들때 키값을 검사해서 새로운거면 메모리상에 그 재질만들고 머터리얼 폴더에 저장, 이미 있던 키값이면 그냥 로드.
 
 - CAsset 클래스에 m_bEngineAsset 맴버 추가
  - 이 에셋이 외부파일에서 불러온 에셋인지, 아니면 엔진프로그램 자체에서 메모리상에 생성한 에셋인지 구분해주는 bool 값. 
    한번 값 지정하면 변하지 않음(엔진상에서 만든 에셋을 파일로 저장시키게 하지는 않는다고함 일단은.)
    이 값이 true면 파일에 정보를 세이브로드 기능 자체를 불가능하게 만들것이다. 엔진상에서 만들어진 에셋이니까 만들때마다 메모리상에 생기고 종료하면 사라짐. 

    그리고 포폴만들때 재질은 에디터를 통해서 만들어야한다 즉 파일로 세이브로드가 가능한 에셋을 써야한다는 것이다. 지금은 간단한 재질만 만들어서
    엔진의 메모리 상에서 에셋 만들고 끝내는거지 이런 구조가 올바른것은 아니다.

    나중에 인스펙터에서 재질정보 띄워줄때 엔진상에서 만든 에셋은 세이브로드가 비활성되어있다. 

==================================================================================

 - 머터리얼 UI에 재질이름과 사용하는 쉐이더 이름 띄워주기
  - 머터리얼 세팅할때 지금까지는 미리 쉐이더 다 설정해주고 에셋에 등록했는데 앞으로 파일로 불러올땐 재질을 막 생성하다보면 쉐이더가 null인 경우가 생김
    
 - GraphicsShader는 필요한 파라미터를 명시해야 UI상에서 뭘 표시할지 알수가있다.
  - tScalarParam, tTexParam 이라는 구조체 생성.
   - 각 구조체에서 두번째 맴버는 이 쉐이더에서 쓰는 파라미터의 용도를 문자열로 명시한것
  - GraphicsShader는 각각 벡터로 m_ScalarParam, m_Texparm을 맴버로 보유.

 - CAssetMgr_init.cpp 에 //parameter 부분을 확인해보라.
   INT_0, TEX_0을 첫번째 인자로주고 두번쨰 인자로 문자열을 주었다.

 - ParamUI 
  - 말만UI지 UI클래스도 상속안한다. 짧막한 파라미터 정보를 UI상에 출력시키기 위한함수. 예시로든 재질의 파라미터 정보를 UI에 띄울때 swich문의 코드를 함수화하려고 만듬
  - inputInt()함수의 UI상에서 값을 변경ㅎ면 true false 반환

 - ParamUI.h에 현재 INT 밖에 없는데 머터리얼의 

