큐브메쉬는 인덱스버퍼 사요안하면 36개, 사용하면 24개의 정점이 필요.

 - 원래 버텍스버퍼 정보는 3가지(위치 색 UV)였는데 이제 3D정점은 총 6가지 정보가 필요
  - 접선벡터, 법선벡터, 종법선벡터. (각각 탄젠트, 노말, 바이노멀) 
  - 정점정보를 바꿨으니 인풋레이아웃 정보도 바꿔줘야함
   - 시멘틱도 "TANGENT" "NORMAL" "BINOMAL" 각각 추가. (이 시멘틱이 실제로 약속된 키워드인지?)
   - 디바이스보고 CreateInputLayout()할때 두번째 인자로 3개 이렇게 넣어준걸 6개로 고친다.

 - 접선, 법선, 종법선벡터는 다 기본적으로 방향벡터다. 즉, 이제 정점에도 방향정보를 넣어줘야한다는 말이다.
  - 법선벡터 -> 어떤 평면에 수직한 방향으로 나아가는 벡터. 
    "수직으로 나가는 방향" 이라는 표현을 쓴다.
    따라서 (0,0,-1) 로 표현됨  
    
    (수직으로 들어간다는 표현을 썼다면 아마 (0,0,1)이라고 하지 않았을까? Z축이 나로부터 멀어지는 쪽이니까.)
    (플러스 마이너스 둘다 수직인데 마이너스인게 이게 약속된 고정값인지 확인 필요)

  - 탄젠트법선은 말그대로 접하는 벡터이다. 평면에 접하는(평행인) 벡터는 무한히 많지만, 탄젠트는 UV좌표계랑 동일한 방향으로 설정되기 때문에 U축 즉 X좌표를 탄젠트벡터의 방향으로 설정한다.
    따라서 (1,0,0)으로 표현됨 

    (이것도 약속된건가? 평면에 접하는 벡터(평행인벡터) 는 무한히 많은데 말이다.)

  - 바이노멀은 법선벡터의 종방향이라는 뜻으로 (0,-1,0)으로 표현됨 
    (이것도 (0,1,0) 일수 있는데 꼭 플러스 방향이 아니라 마이너스인건 약속된건가?)


 - 이 벡터들은 빛 설정에서 가장 많이 쓰인다.
 - 정점이 로컬에서 월드로 이동할때, 이 3벡터들도 같이 회전한다.
 - 각 픽셀에 노말벡터를 도출해낼수있고, 광원으로부터 들어온 빛이 어떻게 반사되는지 계산하게 해준다.

 - 어떻게 빛의 세기를 계산할까? 
  - 빛이 픽셀표면의 수직방향에 가깝게 들어올수록 빛의 세기가 세다. 즉, 빛의 방향과 노말벡터의 방향이 일치할때 가장 빛이 세고, 빛의 방향이 노말벡터의 수직일때 빛이 가장약하다.
  - 이걸 Cos 코사인 함수를 활용해서 표현이 가능하다. 두 벡터의 사이각이 0일때 1 최대값이 나오고, 90일때 0이 나온다. (각도는 0~90사이로 한정함 그 이상은 의미가 없어서)
  - 램버트 코사인법칙. 벡터 내적으로 표면이 받는 빛의 세기를 알수 있다.
  - 빛의 세기를 구한다는 것은 각 물체(픽셀)의 노말벡터로 빛의 벡터와 내적을 한다는 것을 의미한다

 

 - 이제 2D 쉐이더 3D 쉐이더 구분합니다.
  - 새로만든 std3d.fx 쉐이더 파일 설정에서 효과, 5.0 버전 설정 두개함.
   - 전역변수로 광원정보를 설정해준다. 위치, 방향, 색깔. 방향은 사선으로 들어오는 빛을 표현하려고 (1,-1,1)로 설정.

   - 방향벡터가 월드로 갈떄, 이동값 계산이 필요할까? 그러면 안된다. 제대로된 방향을 표현하는게 아니라 엉뚱한 방향을 가리키게 된다.
     다시말해, 월드뷰프로젝트 행렬을 곱할때 회전만 영향을 받아야지 이동은 무시되어야 된다는 말이다. 방향값은 이동이라는 개념이 없다. 월드행렬의 이동이 적용되어선 안된다.

     따라서, 정점에 월드뷰프로젝션을 곱했을때 분명 노말벡터도 영향을 받을텐데 이걸 무효화하는 설정이 필요하다.
     mul(float4(_in.normal,0.f), g_gatWorld); 가 이부분이다.
