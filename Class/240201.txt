 - 지난시간에 구현하겠다고 했던거 하기
   1.지오메트리 쉐이더를 활용해서 해당 파티클이 비활성화 되면 지오메트리에서 중단시킨다. 픽쉘쉐이더까지 갈 필요없이.
   2. 정점위치를 빌보드로 제어하기

 - 지오메트리 쉐이더는 렌더링 하는 과정에서 정점을 중간에 생성시킬수있다. 렌더링 도중에 정점을 만들기 때문에 반대로 이용하면 오히려 정점을 안만들어 버릴수있다.
   이 기능을 더 효과적으로 이용하기 위해 rect mesh 말고 새로운 매쉬를 만들자.

 - 포인트메쉬(점 딸랑하나) 만들기.
   포지션, 컬러, UV 싹 0값.
   왜 점 하나냐면 이게 지오메트릭에 들어가면 점 4개를 만들어서 rect mesh 처럼 바뀌고 각 점 하나가 파티클 효과 하나를 담당하게한다. (참고 이 메쉬는 버텍스쉐이더 단계에서는 그냥 지나감)

 - particle.fx 에서 PS_Particle() 이전 단계에 지오메트릭 관련 기능을 추가.
  
 - 기존에는 IA와 VS를 거쳐 레스터라이저에서 NDC좌표계에서 IA에 입력해준 토폴로지대로 NDC좌표계 영역을 잡고 그걸 설정해논 해상도로 확대한후 그 영역에 포함되는 픽셀들을 픽셀세이더로보냈는데
   VS_OUT 은 레스터라이저가 NDC 좌표계를 쓰는데에 맞춰서 구조가 설정된건데 
   이제는 지오메트릭 쉐이더에 맞춘 새로운 구조가 필요하다.
   그리고 가존애 VS에서 했던 정점 연산을 지오메트릭에서 모든 계산을 하도록 구조를 변경할꺼래서 
   기존 버텍스 쉐이더의 역할은 사라지고 그냥 관문 역할만한다. (VS안써도 되지만 파이프라인에서 쓰는걸 강제하므로 그냥 형식상 거쳐가게 한다는 말임)
   즉 VS는 입력을 그대로 지오메트릭 쉐이더에 전달만 하는 역할로 변경된다.

 - 지오메트릭 쉐이더는 약간의 설명정보를 적어줘야한다.
  - 지오메트릭은 정점을 만드는 역할을 하는데 인덱스 버퍼 같은게 없으므로 VS처럼 뭔가 더 적은 정점으로 그리는건 못하고 사각형 만드려면 정직하게 6개가 필요하다.
   ->[maxvertexcount(6)] 키워드를 GS_Particle()함수 위에 적어준다.
    -> 아니 처음부터 사각형 메쉬 전달하면 되지 뭐하러 점 하나를 사각형으로 만듬? 
      -> 우리가 빌보드를 만들꺼기 때문에.
         기존 렉트메쉬는 카메라가 보는 방향에 따라 회전에대한 연산을 또 구현해야되는데 파티클 쩜하나 메쉬를 썻다면 그걸 뷰스페이스에 보내고 나면 카메라 z축으로 무조건 처다보기 때문에
         어떤 상황에서든지 카메라를 쳐다보는 효과가 나온다. 
         즉, 지오메트릭은 뷰스페이스 상에서 정점을 생성시키기 때문에 회전연산을 고려하지 않아도 되는것이다. 이걸 하려고 빌보드 구조를 만드는데 지오메트릭 쉐이더를 쓰는것이다.
  
  - 파티클렌더 쉐이더 (에셋매니저이닛.cpp)에서 토폴로지 아무것도 안것어 놔서 디폴트로 적용되고 있었는데 포인트리스트로 설정해줌

  - GS_Particle()
   - 입력인자에 'point' 키워드 적어주고 배열 개수도 명시해야한다고 함. 
     또한 출력스트림 레퍼런스 받아오는 세번째 인자 inout TriangleStream<GS_OUT> _OutStream 적어줌. 여기에 결과 정점들이 저장될것임
   - 비활성화인 파티클이라면 바로 return시킴 그럼 Outputstream에 아무것도 안들어 있게 되고 관련된 픽셀쉐이더 자체가 호출이 안된다.

   - 미리 output 배열에 점 4개 정보 초기화선언.
     먼저 파티클 중심점을 월드로 이동시킴
     파티클 중심점을 뷰스페이스로 이동. (크기회전이동인데 점이기 때문에 크기회전 필요없고 이동만)

     1. 파티클 중심점 좌표값에 파티클스케일의 절반만큼의 값을 각각 더해줘서 점 4개의 위치값을 설정해줌
     2. 그렇게 설정한 점 4개좌표를 투영행렬곱해주면 위치값 설정완료.
     3. 각 정점에 UV값 정보 연결해놓기

     이걸 삼각형 모양으로 점 3개씩 이어 붇인다.
     .Append()함수와 .RestartStrip()함수로 삼각형을 만든다.

     여기까지 outputstream에 저장되면 이정보를 레스터 라이저에 전달한다.

  - 이렇게 구조를 싸놨으므로 PS_Particle() 함수에서 비활성화인 파티클을 discard 하는 코드는 지워준다 어차피 지오메트릭에서 걸러졌을테니 여기선 활성화된 파티클만 다루게됨




============================================================================================================================================

 - 빌보드말고 실제 파티클이 이동하는 방향으로 이미지가 회전되고 이동하는 파티클도 필요하다. (레이저 형 효과)
   자신의 속도 방향으로 정렬되서 그 방향으로 이동해야한다.
  - 파티클 모듈에 렌더모듈추가. 
    VelocityAlignment (벨로시티정렬) 가 on 이면 빌보드를 키는거고, off면 그냥 카메라 안바라보고 본인방향대로 이동.
  - 아무것도 회전 안한 상태가 오른쪽 방향이라고 한다. 디폴트가 오른쪽방향. 텍스처 이미지도 이에 맞춰야 의도한대로 동작함.

 ?) 현재 이동하는  방향과 y축과 수직인방향이 z방향이 되고, 
     왼손좌표계 <-?
     외적 
    - 파티클의 디폴트 방향 매트릭스가 단위행렬이므로
      (디폴트 방향행렬 == 단위행렬) x (내가알고싶은 회전행렬) = (현재 이동하는 방향행렬)
      즉 내가 알고싶은 회전 방향이 곧 내가 이동하고있는 방향.

   

 - vR -> 파티클이 이동하는 방향을 뷰스페이스 관점으로 변환한값. 
 - vF -> Cross()로 vR과 up벡터를 한게 내 새로운 프론트 벡터
  - 두벡터 길이길이 싸인세타 값이 나와서 단위벡터끼리 해줘도 결과가 단위벡터로 안나와요 그래서 노멀라이즈 해줍니다.
 - vU -> Cross()로 vF와 VR로 새로운 업벡터구함
 - vRot 위 3가지 구한 벡터. 이걸로 파티클 정점 4개들을 회전시킴

 - 앞서서는 그냥 점4개 좌표구하고 바로 뷰스페이스 이동값까지 더해준거 동시에 했는데 이제 회전을 할 수도 있으므로
   회전부터 하고 이동.