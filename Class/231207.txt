1. 사각형 만들기
 - 토폴로지를 삼각형으로 세팅했기 때문에, 사각형을 그리려면 점이 4개가 아니라 6개가 필요하다. 삼각형 두개를 붙여서 사각형을 만든다.
 - 윈도우 좌표계처럼 위가 - 아니고 +
 A1. 정점좌표 1은 화면 끝에위치, 0.5는 반으로 위치 
 A2. 현재 엔진 좌표계와 윈도우 좌표계차이
 
 - mapping 하면 내가 수정하고자 하는 데이터를 시스템공간(PC)에 저장하고, unmap 함수를 호출하는 순간 그 데이터 들을 gpu상의 메모리로 옳긴다. 
   SUBRESOURCE tsub가 그 시스템 상의 메모리이다. 이걸 context가 unmap을 호출하면 gpu로 데이터를 옳겨줌

 - 규모가 커지면 현재 방식으로 정점정보를 전달하지 않는다. 사각형그릴때 쓰이는 6개의 정점중 4개가 위치가 겹치기 때문에 사실상 필요한 정점은 4개이다.
   지금은 정점갯수가 작아서 6 개의 정점정보를 다 전달해도 메모리 무리가 가지 않지만 정점개수가 많아지면 메모리에 무리가감
   그렇다고 버텍스 쉐이더는 6번 정직하게 다 호출되어야함. 
   지금 하고자 하는 말은 쉐이더 호출횟수는 그대로 두고 버텍스메모리공간만 좀 어떻게 줄일수 없을까 라는 것임 => 그래서 나온 이론이 인덱스버퍼.
   (참고-> 어쩄든 쉐이더 호출 횟수는 줄일수 없음 토폴로지 정의대로 정직하게 도형그릴때 필요한 정점개수만큼 쉐이더작업해야함)

 - 이제 사각형그릴때 버텍스 버퍼 배열크기는 6이 아니라 4임. 대신 인덱스버퍼 배열이 6개필요함
   -> 겹치는 정점은 제외해서 정점개수자체는 줄였지만 버텍스쉐이더가 작업할 정점의 위치는 여전히 6번임(삼각형2개 = 사각형). 인덱스 버퍼는 쉐이더가 그릴 삼각형의 정점 묶음에 대한 정보를 저장하는 것이다. 
    예시)
         0 -- 1 에서 인덱스 버퍼에 저장될 데이터는 012023 이다. 012 삼각형 하나, 023 삼각형 하나. 정점의 개수는 4개로 줄이면서 하는 버텍스쉐이더 작업은 동일하게 할수있게됨.
         |    |
         3 -- 2
        
         인덱스 버퍼를 안쓰면 0,5번 정점과 2,3번정점 겹쳐서 존재함. 총 정점개수는 6개이고 쉐이더는 012, 345 묶어서 삼각형으로 쉐이더 작업함
         0,5 -- 1
          |     |
         4 --  2.3

  - 버텍스버퍼(g_VB)만 알려줬는데 이제 인덱스 버퍼까지 쓰므로 g_IB(인덱스버퍼)알려줌

 - 버텍스버퍼와 인덱스버퍼를 합쳐서 메쉬(mesh)라고한다.
   그리고 메쉬는 리소스라고 할수있다. 몬스터 모델링에 쓰인 메쉬는 몬스터가 몇마리건 메쉬하나로 계속 만들 수 있다. 
 - 만약 몬스터의 위치가 이동한다고 하면 약 1만개되는 버텍스들의 포지션값을 다 바꿔야할까? 매번 mapping 해서 gpu에 그 1만개나 되는 정점정보를 전달해야할까? 
   그래서 앞으로는 이런 방식으로 위치이동을 하지 않을거다. 최초 1번만 위치를 고정한다 즉,최초 값을 지정해주면 버텍스버퍼와 인덱스버퍼의 값은 변하지 않는다.
   이제부터는 나의 위치값(transform) 위치정보만 옳긴다. 즉 메쉬에 있는 1만개의 정점자체의 포지션값을 다 변경하지 말고, 데이터 하나(위치정보)만 더하고빼는 방식을 선택하는 것이다.
   이제 1만개의 정점정보를 정직하게 일일히 위치정보를 바꿔서 gpu에 전달하지 않고 고작 몇 바이트 정도의 위치이동 데이터만 전달해서 그걸로 1만개의 정점을 이동시킬 수 있다. 
   -> 이게 상수버퍼(constant buffer, 이 엔진에서 tTransform 구조체, g_CB)

 - 16바이트 단위로 상수버퍼를 맞춰줘야합니다. 만약 좀 모자르면 데이터 패딩으로 억지로 맞춰줘야 gpu가 인식합니다.
 - 상수버퍼는 초기데이터가 없다 (처음엔 이동 안하니까)
 - 이제 버텍스 버퍼는 데이터를 수정 불가능으로 설정변경하고 오직 상수버퍼로만 위치이동을 할것이다. 
   전에는 g_VB로 GPU에 위치이동된 버텍스를 직접 전달했는데 이젠 g_CB로 위치이동값을 전달함
 - 수업예시) 처음 transform이 (0,0,0) 일때 정중앙에 사각형이 나오고, 0.5값을 상수버퍼에 전달하면 오른쪽에 사각형이 나온다.

 - HLSL에서 상수레지스터는 b로 시작함 (:register(b0)) 상수버퍼 0번 슬롯이라는 뜻
  
- 위치이동원리
  g_transform에 있는값을 g_CB에 담아서 gpu의 상수버퍼(regisger b0) 에 전달(mapping)
  b0에 있는 그 값을 VS(버텍스 쉐이더)에 전달
  
** 상수버퍼 하나의 크기는 4096으로 크기 제한이있음

2. 물체 크기 바꾸기
 - 앞서만든 상수버퍼 구조체에 위치이동에 추가로 scale도 추가
   초기 크기 값은 (1,1,1,1)이므로 처음 정점 정의할때 위치값 그대로 나온다.
   수치가 2가 되면 각 정점의 위치가 2배가 된다. == 결과적으로 각 정점의 간격이 넓어져 크기가 2배가 된다.
   
 *** 곱하는 연산 순서가 크기를 먼저 곱하고 위치이동을 하게 된다. 위치이동하고 크기를 키우지 않는다 현재 쉐이더함수 코드가 그렇다. 
     
   
