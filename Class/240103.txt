 - gpu는 어떻게 작동할까 브르드삼디 cpu도있어요
============
*충돌체

 - 예전 API때 수업했던거 가져올게요
 - CollisionMgr

 - 이전프레임에 충돌했는지에 대한 정보를 저장했는지 알려주는게 collisionID 였어요. 고유한 두 충돌체의 조합마다 고유한 ID를 만들어 저장해놓으면 다른 충돌과 겹쳐서 정보가 저장되는 일이 없겠죠
   그리고 이전 충돌 상황을 알고있어야 현재 충돌상태 및 충돌안한상태에 따라서 알맞은 충돌알고리즘을 적용시키겠죠 그러기 위해서 CollisionID라는 Map에 두 충돌체의 고유 ID 와 이전충돌상황을 알려주는 bool 값을 둔거에요.

 - WORD를 UNSIGNED INT 로 바꿀게요 레이어가 최대 32개니까 거기에 맞춰주는거죠.  32x32 매트릭스인거에요
  예를 들어 1번 7번 레이어가 충돌할것이다라면
   31 30 ...  3 2 1 0
 0                .
 1                .
 2                .
 .                .
 .                .
 7 ............ (체크)
 .
 .
 .
 31

 이렇게 된다 

 그리고 위 매트릭스 모양이 사각형인데 위에 삼각형 부분과 밑의 삼각형 부분은 겹치는 정보다.
 무슨말이냐면 사각형이 
 1 - 2
 |   |
 3 - 4

 라고 하면 

 1) 1-2-3 삼각형 영역과 2-3-4 삼각형 정보가 겹친다. 그래서 2-3-4 공간은 무시하고 1-2-3 삼각형내의 정보만 충돌체크한다. 만약 2-3-4 삼각형 영역까지 검사하면 중복으로 검사하게된다.
  이것을 구현하기위해서 작은 값을 행으로, 큰값을 열로 넣어줘야 충돌검사를 할수 있다.
  만약 1레이어와 5레이어 충돌을 검사한다고 하면 행렬에서 나올수 있는 경우가 2가지 (1행 5열, 5행 1열)이다. 
  이때 5행 1열은 2-3-4 영역이므로 그건 무시하기로 했기 때문에 항상 1-2-3 영역인 1행 5열을 검사한다.

 2) 그리고 열의 검사 시작점은 행에 맞춰진다. 무슨말이냐면 행의 숫자보다 작은 열은 검사안한다. 
    이건 자세히 생각해보면 정말 타당하다 열의 숫자가 행보다 작은 것들은 이미 예전에 행이였던 것들이다. 지금 내가 4행충돌 검사를 하고있으면 1 2 3 레이어들은 검사했다는거다.
    4레이어 충돌검사하는데 1 2 3 열을 검사하면 중복검사가된다 왜냐면 1 2 3열은 4행의 이전 행이었던 1 2 3행이었으므로.
    
    더 자세히 말해보자면, 모든 레이어 충돌 검사를 한다고 할때
    0행부터 검사, 0행은 0~31열 검사.
    1행은 1~31열검사.
    2행은 2~31열검사.
    .
    .
    30행은 30~31열검사.
    31행은 31열만 검사.

    이 사례에서 만약 30행과 0열을 검사한다고 하면 처음 0행에서 이미 30열과 검사했으므로 중복검사가 됨.

1), 2) 를 종합하면 레이어 충돌 검사하는 배열의 최종충돌 검사인덱스는 시각적으로 다음과 같이 표현됨

|||||||||||||||||||
|-----------------|
|---------------  |
|-------------    |
|-----------      |
|---------        |
|-------          |
|-----            |
|--               |
|-                |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|                 |
|||||||||||||||||||

매트릭스에서 검사안하고 버려지는 영역이 반 이상이됨. 가로 (-) 부분이 검사하는 공간



 - 부모오브젝트는 렌더기능만 두고(부모는 충돌 안만들고), 자식은 렌더 기능이 없는 대신에 충돌기능만 둡니다. <- 지금 엔진 구조에서 이 방식을 채택하셔야 합니다.
   게임오브젝트는 하나의 충돌체만 가질수 있는 구조 때문에 충돌체 여러개를 가지려면 결국 계층구조를 활용해서 자식들이 충돌기능을 가지게 할 수 밖에 없죠. 
   그래서 어느 자식이 충돌하냐에 따라 부모는 그것에 맞춰 애니메이션을 변경한다던지 하는 설계를 하셔야 합니다.

 - EndOverLap()은 붙었다가 떨어진 충돌상황이거나, 충돌상황도중 양쪽중 누군가 Death 상태가 됬을때 실행되는 함수.



 ==========================================================================

  - 같은레이어(정확히는 한레이어에 있는 모든 오브젝트집합의 배열)를 같은벡터라고 합니다.
  
  - 두 충돌체를 검사하는 메커니즘은 회전을 고려하지 않았습니다. 즉,
    두 물체의 위치값 사이의 거리와 두 충돌체의 반지름 값을 더한값을 비교했다.

  - 이제는 회전이 된 경우까지 생각한다.
    표면벡터를 만들어서 투영시키는 메커니즘을 이용할것이다.
    두 중점을 투영시키고 투영된 중점사이의 거리와, 두 물체를 투영시키고 투영된 각각의 길이의 절반씩을 더한값을 비교한다.
    투영방향으로 투영축을 써서 총 4방향으로 투영을 시켰을때 나눌수 없으면 겹쳐진것이다.

  - 사각형 충돌체의 방향벡터 2개만 있으면 되므로 사실 정점은 4개가 아닌 3개만 있어도 되지만 그래도 4개다 보내줌
    그런 상태에서 1)각 정점들을 빼서 방향벡터를 구해준다. 총4개. 

    2) 두 충돌체의 원점을 빼서 중심끼리의 센터벡터를 만든다.

    3) 1)에서 만든 벡터들이 곧 투영시킬 공간이 되기도 한다. 그래서 일부러 방향벡터로 만들지 않고 뺀상태로 그래로둔것

    * 내적의 결과값이 바로 1)의 벡터들이 투영축에 투영된 결과이다.
   
  - 코드를 보면 1) 방향벡터를 노멀라이즈한다. 
                2) 각 방향 (총 4방향)마다 충돌체 두개의 벡터들을 투영 (총 4개의 투영벡터를 투영축으로 투영시켜서 길이를 누적받는다.)
                   그후 투영된 길이의 절반을나눠줌. 

                3) 1~2 작업을 방향벡터 방향으로 투영 4번할동안 한번이라도 중점투영보다 투영된 벡터총합이 더 크면 충돌.


 - 선생님이 오늘한건 사각형 사각형 충돌만 만들었어요. 사각형, 원형 충돌같은 경우는 잘 안쓰는데 정 모르겠으면 딴데 조사해서 만들어 보세요.







