- 물체가 뒤집혔을떄 안보이는 이유 
           -> 뒷면은 안그리는게 디폴트 설정이래서
            -> 왜안그려 - 레스터라이저가 뒷면은 그릴대상으로 지정안함
             -> 뒷면인지 앞면인지는 어캐암? 
              -> 토폴로지 설정대로 도형 그릴떄 도형이 시계방향으로 그려졌으면 앞면 반시계면 뒷면
               
 - 파이프라인이 아직도 미완성. 레스터라이저 뎁스스텐실, 블렌딩은 디폴트설정으로 돌아가고 있었음
 - 레스터라이저의 디폴트설정인 컬백모드는 물체가 뒤집혀지면 안그려진다. 이게 싫으면 레스터라이저 설정 바꿔야함

 - 그렇다면 왜 레스터라이저의 디폴트 설정에 Cull_Back 모드로 되어있을까
  - 우선 레스터라이저 모드는 총 4가지가 있음
    Cullback은 뒤집한거 안그림 CullFront는 앞모습을 안그림 CullNone은 그냥 다 그림(컬링안함) Wire_Frame은 안에 채워 그려주지 않고 토폴로지로 정해준 도형의 실선만 그려줌
                                                                                                       (우리설정에선 평면사각형하나를 그리면 삼각형 두개가 보일것임)

    이때 m_arrRS 배열에서 Cull_Back에는 nullptr로 지정했다 (어차피 널포인터를 전달하면 파이프라인은 디폴트설정인 컬백모드를 실행하므로)
    하지만 다른 설정은 널포인터로 설정하면 안되고 레스터라이저 포인터를 채워넣어줘야 원하는 모드의 레스터라이저를 쓸수있다

    앞면은 시계방향, 뒷면은 반시계방향인것은 관습적으로 굳어진것이다. 즉 CullFront 는 시계방향으로 그려진걸 컬링한다는 뜻, CullBack은 반대
    예시) 우리는 애초에 정점 지정해줄때부터 시계방향으로 인덱스를 설정줬다. 즉 디폴트인 모습이 시계방향인 것이다. 선생님이 애초에 그걸 고려하고 정점을 설계함.
     ex) 사각형 메쉬의 토폴로지 모습
                  0  1
                     2     
                  0
                  3  2
         0,1,2 순으로 삼각형이 그려질때 시계방향, 역시 0,2,3 순으로 삼각형 그릴때 시계방향.

  - 2D 게임은 3D모드 처럼 보는 방향에 따라 그릴지 안그릴지 정할 필요가 없으므로 기본 레스터라이저 모드를 CUll none으로 한다.

  ** 3D 게임에서 CUll back이나 Cull front를 쓰는이유 -> 쓸모없이 현실에서 안보이는 부분은 그리지 않으려고
                                                        만약 컬링을 안한다면, 3D 물체를 볼때 현실세계에선 실제로 안보이는 부분까지 전부 그리니까 모숩아 이상해짐 + 메모리과부하
   - 만약 도형이 시계방향으로 그려졌고, 그걸로 구를 만들면 
     cullback 모드를 쓴다면 구 안쪽에서 구를 바라보면 전부 반시계 도형이 되버리므로 아무것도 안보인다.
      예시 0 1  시계방향 도형을 구 안쪽에서 보면  1 0   로 그리지게 보여서 반시계방향이 되버림
             2                                    2 

     똑같은 구를 cullfront 모드로 구 안쪽에서 구를 보면 그러면 구의 내부가 보인다. 

   - 그리고 구 밖에서 볼땐 제대로 보면 시계방향, 반대편은 반시계방향으로 정점을 설계하면 cullback 모드에선 뒷모습이 안보인다.

     이제 보는 방향을 정반대방향으로 보면 이제 역으로 처음본 방향에서 시계방향이었던 도형들이 반시계방향이 되고, 처음에 반시계방향이었던 도형들은 시계방향으로 그려진다.
     반드시 구의 뒷면은 보이지않게됨.

     이건 설명이 복잡해서 직접 도형 몇개 예시를 보면서 하면 이해가 쉽다.

A1. 만약 앞면은 시계방향 뒷면은 반시계방향으로 그려진 구를 90도만 회전시키면 어떻게 되나?



%% 깊이스텐실
 - Less 깊이값이 가장 작은정점이 그릴대상이됨
   Less_Equal 작거나 같은것
   Greater 더 먼것
   Greater_Equal 멀거나 같은것

 - 깊이 모드에서 Grater 조건은 왜쓰나? 왜 멀리있는걸 그리고 가까이 있는걸 안그리나? (현실과 반대로)
   이 모드는 어떤 물체가 기준보다 더 가까이 있는지 감지하려고 씀. 만약 기준물체가 하나도 안그려지면 그것보다 가까이 있는건 없다는 것임 
   반대로 기준물체가 보이면 기준물체보다 카메라에 가까운 어떤 물체가 존재한다는 의미. 
   이것을 활용하면 카메라 기준으로 일정거리 이내에는 어떤 물체도 있으면 안될때 그걸 감지하려고 greater 깊이모드를 쓸수있음

 - 역시 Less가 기본모드래서 이거만 null 포인터로 설정해주고 나머진 실제로 만들어서 포인터로 저장

 - 깊이스텐실의 Desc
 - DepthFunc은 깊이스텐실 동작메커니즘을 정해주는 옵션 우리는 디폴트로 Less_Equal
 - WriteMask란 깊이관련 설정을 쓸것인가? <- 부정확

1. 스텐실은 무것인가
 - 미술용어. 특정패턴 모양의 틀에 색을 채워넣어 그리는 기법
 - 깊이스텐실은 4바이트중 3바이트는 깊이값 (부동소수점)이고 1바이트는 스텐실저장 (0~255 값)

 - early z : 물체의 깊이값만 뽑아내서 맵만들고 유효한 거만 그리는 방식. 너무 복잡한 환경에서 주로 이용
 - desc에 frontfacd 같은건 스텐실 옵션인데 여기에 기록되는 숫자들은 스텐실 설정이된다.
  예시) 스텐실이 7인 값인 경우만 렌더링해랴. 미술이랑 똑같음
        주로 거울 만들떄. 그 특정 스텐실 값인 경우만 반사표면을 그림
  - 우리는 스텐실 안쓸겁니다.



%% 블렌드 스테이츠
 - 디폴트 설정은 들어온 색상값을 그대로 찍어서 렌더타겟에 그려줌
   만약 그리기 전에 뭔가 다른 색깔이 있으면 그걸 아예 무시하던지 아니면 적절히 섞어서 그림
 - 알파블렌딩이란, 알파값을 활용해서 내가 그리고자 하는 색깔과 이미 기존에 있던 색깔을 적절히 섞어서 최종컬러를 정하는 방식이다.
   (내가그릴색상) x A + (원래있던색상) x (1-A)
    참고) 알파값은 물론 RGB색깔도 0~255 의 값을 0~1로 정규화한 수치로 표현함
 - 알파값이 더 높은게 더 찐하게 그려질것임

 - 블렌드 타입은 일단 디폴트, 알파블랜드, 원_원(1:1 비율로 섞는) 타입을 만들어놈
 - 이제 기본 블렌드 설정은 알파블랜드 입니다. 