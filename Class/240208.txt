 ** 아웃라이너에 표시된 오브젝트 노드 누르면 인스펙터에 정보 표시되게하기

 - SelectObject()함수
  - 아웃라이너에서 트리노드가 지원하는 델리게이트 기능으로 호출되는 함수
  - 선택한 노드의 정보를 인스펙터에 전달한다. 정보받은 인스펙터는 그걸로 필요한 일 하면된다

 <드래그앤드로우 기능만들기>

  - BeginDragDropsource() 함수 사용. 마우스로 트리노드를 잡아끌기 가능
    EndDragDropSource() 나올때까지 마우스 하단에 박스 생긴곳에서 작업을 수행함.
    이걸 이용해서 Text()함수 써서 내가 지금 잡아끄는 노드의 이름을 출력시킴

  - payload(항공 수하물을 뜻함)이라는 기능을 사용해서 데이터를 전달시킬 수있다. 드래그할때 전역변수영역에 어떤 데이터를 넣을 수 있고,
    Drop 당하는 대상이 그 버퍼에서 데이터를 받게 할수있다.
  - 노드의 m_Owner의 ID값을 페이로드의 ID로 설정한다. 이렇게해야 잡아끌어서 데이터 전달할떄 아웃라이너에서 온 노드인지 컨텐츠에서 온 노드인지 구분할수 있다
    잡아끄는 기능을 수행할때는 클릭검사안하게 else처리한다. 아니면 잡아끌때 클릭판정도 동시에 됨
    imgui에서 제공했던 클릭판정함수 IsItemClicked()함수 가 마우스클릭하고 뗼때 true가 아니라 누르자마자 true 띄여서 원하는 동작이 안나와서
    선생님 key_release()함수사용


  - 잡아끌어진 노드 말고 잡아끌어진 노드가 나한테 왔는지 계속검사하는 노드를 체크하는 코드도 필요. (drop체크)
    그 함수는 BeginDragDropTarget()임. Source는 잡아끄는애, Target은 그 잡아끄는애를 받는애. MeshRenderUI.cpp 파일에 페이로드(드래그된 노드의 데이터 저장공간)를 받아보는 기능을 만들어보자
  - AccepDragDropPayload() 함수
   - 첫번째 인자로 ID 넣어줌. 이 ID는 내가 받을 정보가 해당 ID 일때만 정보를 받음. 예사) 컨텐츠 노드 일땐 "ContentTree"
   - 반환값으로 ImGuiPayload 객체의 포인터. 
   - DWORD_PTR 로 날라온 데이터를 까보면 어떤 주소값인데 이게 에셋주소일 것이다. 이걸 CAsset* 로 캐스팅해서 써보면된다.
     머터리얼도 똑같이 하면된다.

========================================================


 - 아웃라이너에서 드래그앤드롭이 가능하다. 델리게이트를 써서 아웃라이너 내부에 드래드앤드랍 발생했을떄 미리 정의한 델리게이트 함수를 쓴다.
   그런데 그 기능을 원하지 않을 수 있기 때문에 m_bDragDrop 맴버로 이 기능을 쓸지 안쓸지 bool값으로 판단한다.

 - TreeUI,cpp 자체에서 드랍 기능을 검사하는 코드와 메쉬UI 머터리얼UI에서 드랍될때 검사하는 코드가 많이 유사하다. TreeUI에서는 드래그 기능까지 더 있는 상태.
   