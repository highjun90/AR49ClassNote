 - 제보된 문제점1) 자식오브젝트 render()할때 오류
  - 카메라 기반 렌더링으로 구조를 바꾸면서 자식오브젝트는 신경안쓰고 오브젝트 본인만 렌더링 호출해 주면 된다.
    자식오브젝트 렌더링 호출해주는 코드 삭제.

 - 제보된 문제점2) 복사된오브젝트가 복제될때 동적재질의 세팅값도 복사를 받아야한다. (동적재질만 복사생성하고 동적재질의 맴버의 값은 복사안했음) 
  - 그래서 원본컴포넌트가 동적재질을 가지고있을때, 복사본컴포넌트의 동적재질에 원본동적재질을 대입연산자로 대입하는코드 추가
   - CMaterial클래스의 복사생성자 정의.
    - 인자로준 원본재질의 이름을 복사.
      m_Const, m_arrTex도 복사.
      쉐이더도 복사.
  - CRenderComponent::CRenderComponent()
   - *m_DynamicMtrl.Get() = *_OriginRenderCom.m_DynamicMtrl.Get(); 부분이 재질의 동적재질을 복사하는 부분.
    - m_DynamicMtrl.Get()은 곧 CMaterial의 포인터를 반환하는거고,
      *m_DynamicMtrl.Get()은 그 포인터가 가리키는 CMaterial 객체자체를 뜻함
      CMaterial 의 대입연산자 재정의 void operator = ()부분에서  필요한 재질데이터를 복사함

 * 에디터 카메라
 - init()
  - 에디터용 카메라 오브젝트는 CGameObjectEx 타입이다.
  - 에디터 카메라에 Transform컴포넌트, 카메라 컴포넌트 두개를 추가해주면 카메라로써의 기능을 수행할수있음
  - 레벨안에 있는 카메라는 스크립트를 제거할게요  
    그리고 카메라무브스크립트를 에디터카메라에 넣어준다.
  - 렌더매니저에 에디터카메라 맴버를 추가해주고 그 카메라를 등록하는 함수를 만든다. (Register에디터카메라블라())
   - 이제 렌더매니저에 자기자신을 등록

 - progress()
  - 에디터오브젝트의 tick()을 반복문돌려줌

 - 렌더매니저에 
  - render()만있었는데 render_editor()이란 함수추가
  - m_RenderFunc이라는 함수포인터 새로정의
   - render()로 동작할수도 있고 에디터 버전으로 동작하면 render_editor()으로 동작하게됨

  - render_editor()
   - 원래는 레벨 카메라에서 할일을 에디터모드에서는 이 함수가 대신하게됨(즉 render()랑 똑같은 기능이지만 쓰는 카메라가 다를뿐) 에디터카메라를 기반으로한 SortObject()와 render() 수행

  - 함수포인터가 레벨 상태에 따라 render() render_editor를 왔다갔다 해야함. 이거는 task로 처리해야함 그래야 프레임을 시작하기 전에 통일성있게 적용시킬수있음

 * DT_Engine인데 EngineDT라고 했음 헷갈리지말아줘 미래의 나야(240221)


 * 레벨상태 변경
 - CLevel::ChageState()
  - LEVEL_STATE::STOP , PLAY, PAUSE 를 현재상태(m_state)와 인자로준 바뀌어야할 상태(_NextState) 의 경우의 수를 if문으로 나눠서 해야할일을 정의.
   - 주석으로 상황을 친절하게 적어주심
   - 플레이 - 정지 or 일시정지
    - 델타 타임에 rock 걸러주는 코드 추가
  - 앞에서 할일하고 레벨상태 변경하는걸로 마무리( m_state  대입연산)

  

 - CTmeMgr
  - 이제 델타타임을 두개로 관리.
   - m_EngineDeltaTime 
    - 엔진차원에서 시간동기화로 동작하는 것들이 필요. 정지됬다고 해서 델타타임을 다 0이되면 곤란하고 계속 델타타임을 돌려야 될때 이용됨

  - tick()
   - m_bLock()이 true면(델타타임 정지)면 델타타임은 0으로 세팅하는 코드추가. 엔진델타타임은 놔둠

 - CLevelMgt
  - ChageLevelState()
   - task.Param_1 은 현재 레벨상태, task.Param_2는 바꿀 레벨상태.
   - 태스크 매니저에서 Task_type::CHANGE_LEVELSTATE: 였으면 해야할일 수행하게 코드추가
======================================================================================================

 - 제보) 게임오브젝트 복사생성자 문제
  - CGameObject.cpp에서 복사생성자 쪽에서 코드 순서를 조금 손봄.
    자식오브젝트가 부모에 자식으로 등록되고 나서 레이어 인덱스 값을 줘야함.
    이전에는 자식오브젝트가 미리 레이어 인덱스 설정하고 나서 자식으로 등록되는 순서였음
  - 이게 뭐가 문제냐? 수정전에는 자식추가하려할떄 이걸 최상단 오브젝트로 여겨버림. AddChild()함수 구조가 그럼.
    즉,
    ChildClone->m_iLayerIdx = _OriginObject.m_vecChild[i]->m_iLayerIdx;
    AddChild(ChildClone);
    위아래 순서를 바꾸면됨 


 - 렌더매니저
  - ActiveEditorMode() 함수
   - 포인터 세팅을 주어진 인자에 따라 render()냐 render_editor()냐로 설정해주는 함수

 - 에디터오브젝트매니저
  - init()
   - 에디터카메라는 UI카메라(31번레이어) 제외. 레벨이 play 상태일때만  ui보이게 한다함.
   - 에디터카메라는 카메라 우선순위는 의미없음

 * level의 init()은 나중에 사라져야 하고 지금 당장에도 init()의 begin()강제 호출해주는거 삭제함.

  - 첫 tick()에서 문제인게 finaltick()에서 레벨 상태를 설정하고 그 다음에 task매니저에서 레벨의 상태를 변경하는 상태.
    그래서 첫tick()만 태스크매니저에서 레벨상태 바꾸는 대신, 레벨에 구현해논 ChangeState()를 바로 호출해줌 

  - 레벨이 Stop이면 카메라는 메인카메라 대신 에디터 카메라일텐데, 그럼 에디터 카메라는 그냥 DT 말고 EngineDT를 써야 스크립트에 짜놓은 카메라 이동기능을 쓸수있을것. 그렇게 코드 수정함.
    