 - SetParameter()함수로 Int_0에 g_int_0 에 FACE_X에 매칭. (타일맵 개수) y도 똑같이.

 - 타일맵 그릴때, 전체화면에서 그리고싶은 부분영역의 좌상단 UV값을 알고, 거기에서 얼마만큼의 UV 값을 더해서 우하단 UV값을 구할지 미리 알려주고 타일맵을 쉐이딩하면 된다는게 기존공식
   이러면 아틀라스에서 타일하나만 그림. 여러개 그리고싶다면?

   - FACE 개수(면 개수) 만큼 뻥튀기하게 되면 0~1사이였던 UV값이 변한다. (그리고싶은 타일개수만큼 UV값을 곱한다) 
      예를들어 1개(1x1)가 아니라 4개(2x2) 타일을 출력하고 싶으면 UV값에 2를 곱한다. 그럼 전체 UV값이 0~1에서 0~2가됨,
      그럼 UV값 1을 초과한 부분은 이미지에서도 그만큼 초과한 영역까지 화면에 그려진다. 따라서 타일이 총4개그려짐
       - floor()함수 -정수부 날리고 실수부만 남기기. 이부분은 아틀라스상에서의 UV값을 찾는것. 의도적으로 0~1이상의 UV값을 0~1사이의 값으로 만드는과정
       - 아틀라스의 UV값을 찾았으면 전체 UV값에 더해서 진짜 위치에 그리기

 - 타일맵은 상수버퍼로 전달하지 말고 이제부터 구조화버퍼로 보냅니다. (크기가 너무 클수도있고 프로그램 실행실시간으로 바꿔야할때도있음)
 - tTileInfo 구조체
  - 타일오브젝트에서, 타일 하나의 정보가 담긴 구조체이다. 4x4 타일오브젝트라면 이 구조체가 16개 필요하다
  - vLeftTopUV 아틀라스에서 짜를 타일의 좌상단 UV값. 이 값이 이 칸의 이미지가 된다.
  - bRender    렌더가 되는 타일인지, 안그릴 타일인지. 타일중간에 빵구난 타일 그릴때 유용.
  - padding

 - tTileInfo 개수만큼 m_TileInfoBuffer라는 구조화버퍼에 Create()함수를 실시한다.
 - SetTileIndex -> 아틀라스 이미지의 몇행 몇열의 타일에 인덱스를 지정한다.
                   즉 어느칸에 아틀라스의 어떤 타일을 그려넣을지 지정하는것
                   예시) SetTileIndex(0,0,20) == 0행0열 타일은 아틀라스 이미지의 인덱스 20 타일로 그린다.
                   - 타일전체크기가 1x1 이건 4x4 이건 그 이상이건 SetTileIndex()로 각 칸에 어떤 타일 이미지를 그려줄지 지정안하면 그 칸은 빈칸으로 나온다
                   - _Row * m_FaceX + _Col; 부분이 내가 접근할 아틀라스 타일?

 - VEC2_0에 넣지말고 구조화버퍼에 넣기

 - fx파일에 tTileInfo 구조체 선언하기
 - t20 레지스터에 PC 텍스처 레지스터와 바인딩

 - 이제 칸마다 LeftTop의 UV가 다르고 그 정보들이 구조화버퍼에 있다. 4개면 구조화버퍼에서 4개 위치별로 꺼내올게 다른것임
   각 칸들이 UV 값에서 버리는 정수정보가 곧 구조화 버퍼에서의 인덱스 값과 같다
  
 - LevelMgr에서 어떻게 타일맵을 그릴지 사용예시 나와있다
   16x16 으로 타일을 출력해도 하나의 오브젝트 뿐이라는걸 기억. 이런 타일오브젝트들을 여러개 만들어서 이어붙이면됨

 - Collide2D로 설정하는 걸 에디터에 적용할수있음 이렇게 만든 충돌체는 타일의 자식으로 생기게 하면 타일 위치가 변해도 따라옴

 - 필수적인 함수는 만들어서 타일맵마무리


 - SetTileAtlas() 보충
  - m_vTilePixelSize에 아틀라스의 픽셀크기를 바탕으로 어떻게 자를지 열과행을 결정

 ===========================================================================================================================================================

 - 파티클 시스템추가. 수많은 입자로 애니메이션 만들기. 랜덤성. 
   수백수천개의 입자를 게임오브젝트로 렌더링하려면 렌더링 파이프라인 비용이 어마무시해서 프레임이 박살난다. 
   기존방식으로는 CPU도 힘들고 GPU도 힘들다. DrawCall 자체를 줄여햐한다 == 렌더링횟수를 줄인다. 
   GPU는 기왕이면 렌더링파이프라인 한번 돌떄 한꺼번에 그리고 싶지 파티클 오브젝트 한개당 각자 렌더링 파이프라인 돌리기 힘들다. 
   CPU도 particle Tick() 호출 횟수를 줄이고싶다. 오브젝트 수천개의 tick()호출은 힘들다.

 - 파티클의 Update()조차도 CPU에서 말고 GPU한테 시키고싶다.
   -> CPU는 Update()호출 수천개 안해서 좋고 GPU는 렌더업데이트를 병렬적으로 진행해서 렌더파이프라인 호출(DrawCall) 자체를 줄일 수 있어서 좋다
  
 - CPU가 partilesystem에 파티클 전부 업데이트 시켜! 하면 GPU에서 본인이 가진 파티클 전부 DT에 맞게 병렬적으로 업데이트 시킴

 - CParticleSystem 클래스
  - 렌더컴포넌트를 상속. 컴포넌트 유형은 파티클시스템

  - 파티클 오브젝트 자체를 GPU한테 데이터를 전달해서 병렬처리 하는 방법부터 알아야함
   - 파이프라인과 상관없는 컴퓨트 쉐이드라는걸 알아야합니다.
     컴퓨트쉐이더는 렌더링파이프라인과 상관없는 별도의 쉐이딩입니다. 이걸 General Purpose GPU 라는, 렌더 목적이 아니라 일반적인 목적으로 GPU를 쓴다는 의미입니다.(GPGPU)
     대표적인 예시가 코인채굴. CUDA 라는 언어로 GPU 프로그래밍해서 채굴돌림
  - 컴퓨트 쉐이더는 다이렉트x에서 제공.  AMD나 NVIDIA 그래픽카드를 따지지 않고 GPU를 제어할수 있다. 반면 CUDA는 NVIDIA 그래픽카드 전용언어이다. 퍼포먼스는 CUDA가 더 좋긴함 하드웨어 맞춤 언어라서
  - 우선 텍스처 하나의 픽셀 하나를 그리라는 명령을 컴퓨트쉐이더로 구현할것. 나중에 이걸 수천개 병렬동작하게 할거임d