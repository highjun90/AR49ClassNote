 - 레벨 생성 사전작업
  - using std:wstring; 복습
  - 객체 Entity - 맴버는 m_ID 와 m_strName 
                  레벨이 이 객체를 상속함 
                  static 으로 g_NextID가 선언되어있음

 - 일단 물체 하나 그리기 전까지 test.cpp 에서 삼각형, 사각형 그리기를 목표로한다.
  - 렌더타켓은 스왑체인이, 뎊스스텐실은 디바이스가 가리키고있음
    GPU 상에 그려진 렌더타켓은, 우리 시스템의 윈도우 화면에 그려져야함(렌더타켓에 뭘 그려도 결국 윈도우 창에 복붙하는 작업을 해야 비로소 우리가 볼수있음)
    그 송출 함수가 바로 Present()임. 렌더타켓의 화면을 우리 윈도우 화면으로 송출해준다.
  - 렌더타켓은 각 픽셀이 디폴트로 0(검은색)으로 되어잇다.
  - TestProgress()는 present() 함수를 계속 실행한다. 아무것도 안하면 계속 검은 화면이 나올것이다.
  - ClearRenderTarget() 함수는 컨텍스트를 통해 렌더타켓뷰를 이용해서 렌더타겟의 클리어컬러(기본색상)를 지정해준다.
  - ClearColor[4] 배열은 RGB값(0~255 사이정수)의 노멀라이즈 된 값 (0~1 사이실수값)이다.

  - 텍스처 안에 꼭 색상뿐빤아니라 z값깊이 같은 다른 정보도 저장될 수 있음을 알아야함.
  - 역시 컨텍스트의 clearDepthSencilView 로 뎊스는 1로 초기화 한다.
   - 참고 -> MinDepth(최소 깊이)는 0, MaxDepth (최고 깊이)는 1로 초기화했음. 어디서? 뷰포트에서. 0~1 사이의 값이므로 0이 가장 앞에있는거, 1이 젤 뒤에있는 게 된다.
             예시를 들자면, 렌더타겟의 같은 위치에 그려야할 두개의 픽셀이 있다고 하자. 깊이가 0.4인 픽셀보다 0.6인 픽셀이 더 크므로, 0.6픽셀은 더 멀리 있으니 0.4 픽셀에 가려저서 보이지 않는다.
    - 참고2-> 뷰포트란? 렌더타겟의 전체 화면을 윈도우 화면의 어느위치에 어느 크기만큼으로 그릴지 결정하는 것이다.
              보통 렌더타켓의 해상도와 뷰포트의 해상도는 같게 하는게 당연하다. 
    - 참고3 -> 깊이스텐실을 클리어하는데 0이아닌(0.1도 0.2도 0.3도아닌..) 1로해야하는 이유-> 0이면 렌더타겟에 뭘 그려도 아무것도 안보이니까.  
               배경이 제일 큰 우선순위면 당연히 다른건 안보임.
  
  - 말만 Direct2D지 사실상 3D 작업을 하는 중이다.
  - SimpleMath란 다이렉트에서 제공해주는 수학라이브러리를 누가 벡터 덧셈뺼샘 함수 추가 등의 노가다 하기 싫어서 만들어 놓은 라이브러리이다. 선생님이 자주 쓴다고함 여기 수업에도 쓸거임 수학노가다 하기싫어서.
    Vector2 보면 XMFloat2 상속해서 뭐 여러가지 만들어 놓은걸 확인할 수있다. Vector2 를 typedef 해서 Vec2로 해서 쓰고있는중.
  
  - VerTex는 좌표, 색상, 3D에는 방향정보(노말벡터,탄젠트 접선벡터, 바이노말 벡터) 등등을 가질수있다. 정점하나가 가질 데이터 정보를 구조체 Vtx에 담는다. 
    1. Vec3로 좌표값
    2. Vec4로 색상값
    3. Vec2로 UV 좌표계(표면에서 내가 참조할 이미지 위치?)(Texture Coordinate 이라고도함)

    나중에 3D로 넘어가면 정보가 훨씬 많아진다.

 - 삼각형 그리기
  - 이론
   - 삼각형의 정점정보를 GPU RAM에 옳겨야한다. ID3D11Resource중에 그걸 상속하는 Buffer와 Texture2D가  그 역할을 한다.
     이미지 관련된 데이터는 Texture2D가 하는데 현재는 정점의 데이터만 옳길 것이므로 Buffer를 써야한다. 그리고 그전에 정점 정보를 적어준다.
   - 버텍스 정보중에 포지션만 중요하고 컬러는 중요하지 않아서 일단 다 하얀색으로 값을 넣어준다.
   - 버텍스 포지션은 NDC 좌표계를 이용해 정규화 한다는 표현을 쓴다. 이 좌표계는 x, y 좌표가 각각 (-1 ~ 1 ) 사이값이다.
     삼각형을 그리려면 0,1 하고 -1,-1 하고 1,-1 이 3쌍 필요하다. (깊이스텐실은 세개다 0으로 한다) 이걸 Vec3에 각각 기록한다.

   - 이제 버퍼정보를 설정하고 그걸로 정점버퍼를 만들자. 
    D3D11_BUFFER_DESC
     BindFlags는 이 버퍼의 용도를 정해주는 거라고 했다. 앞서 렌더타겟에도 했었음 
     StructureByteStride는 정점하나의 사이즈를 알려주는 것이다.
     CPUAccessFlags는 렌더타겟과 다르게 Write로 해준다. 이러면 GPU에 값을 계속 전송하여 수정할수 있다. 반면 렌더타겟은 한번 만들면 끝임 그건 이 설정을 디폴트로 만드니까.
     D3d11_SUBRESOURCEDATA 에 버텍스배열 주소 넣어주면 내가 설정한 버텍스의 초기데이터를 버퍼의 초기데이터로 설정

   - 지금까지 한거는 0번, 앞으로 할거 알아보기
    0. 컨텍스트로 IASetVertexBuffers함수 실행 = 인풋 어셈블러에 정점버퍼에 데이터 만들고 GPU에 전달
    1. 버텍스 쉐이더 스테이지에서 작업
     1.1 hull, 도메인 스테이지(테셀레이션) (신기술들)
    2. 지오메트릭스테이지
    3. 레스터라이저
    4. 픽셀쉐이더
    5. 아웃풋머지스테이지 
     5.1 뎊스스텐실 스테이지, 블렌드 스테이지

     1.1, 2, 생략가능 (아예안해도됨)
     3, 5.1 기본 디폴프 있어서 생략가능
     0, 1, 4 필수

     그래픽스 파이프라인 검색

   - 정점 하나당 버텍스쉐이더가 일일히 작업을 해줘야하고, 그 쉐이더가 어떻게 동작할 지는 직접 코딩해야함. 그리고 쉐이더는 CPU가 아니라 GPU상에서 동작하는 함수임.
   - 픽쉘 쉐이더는 레스터라이저로 걸러진 픽셀 전체에 일일히 전부 해주는 작업.
   - HLSL 이라는 쉐이더 전용 언어로 쉐이더함수를 짜줘야함 C++로안됨
    - SV_ : 시스템 벨류. Semetric 중 하나.
   