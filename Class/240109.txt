 * 광원을 만들어보자

 - 구조체 tLightInfo
   멤버로 광원의        색상(vColor), 
   광원으로 인한        환경광(주변광, vAmbient, 어떤 광원으로 인해 어떤 물체가 반사한 빛때문에 있는 최소한의 보장된 밝기),
                        반사광 (vSpecular, 물체가 이 광원을 반사했을때의 색상),
                       (원론적인 빛의 재질과는 다른 의미로 색상만 이야기하는듯함.)


   광원의               위치(vWorldPos),
   광원이 향하는        방향 (vWorldDir),
   광원이 영향을 미치는 반경(거리정보)(fRadius),
   광원의 범위          각도(fAngle),
   광원                 타입(LightType),

   16바이트 맞춰주기위한 빈 공간(패딩바이트)

 - 광원역할을 하는 오브젝트 설계하기
  - Light2D 컴포넌트 만들기
   - 멤버로 tLightInfo 구조체가짐 

 - 어떤레벨에 광원이 있으면 좋겠다 하면 오브젝트에 광원컴포넌트 넣어주면된다.
 - 광원넣는 예시를 만들어보기
  - LevelMgr에 pLight라는 오브젝트 생성
    AddComponent로 트랜스폼, 메쉬렌더, 라이트2D 붙임.
    pLight->Transform()->SetRelativePos() 로 광원오브젝트의 위치지정
    
? GetTransform()이 아니라 그냥 Transform() 이네 Light2D()도 마찬가지로 Get이 없네 이렇게 설계한 이유가 뭐였찌
    
 - 3D 관점으로 봤을때 3종류가 있다. 무엇으로 구분하나? 방향. 방향이 광원에서 너무 중요한 요소다. 무슨방향? 광원에서 피사체로 오는 빛의 각도를 말함

   Point Light 점광원 -> 가장 현실적인 빛. 전구같은 빛. 빛이 중싱에서 사방으로 퍼져나감
   Directional Light 방향성 광원. 빛이 한방향으로 오는 광원. 예를들어 태양으로 오는빛. 지구가 너무 작아서 우주에서 보면 사실 태양도 점광원인데 우리가 실제로 사는 지구는 너무 작기때문에 태양으로 받는빛의 각도 
                                  빛이 오는 각도에 차이가 거의없다. 따라서 빛의 각도가 미세하므로 오차 무시하고 동일한 방향으로 오는 빛을  가정한 광원이 방향성광원.

 - 쉐이더에서는 빛의 각도를 0~90도 사이에 코사인을 이용하여 빛의 세기를 계산. 90도 넘어간거는 보는 방향의 뒤에 광원이 있다는 말이므로 자연스레 빛의 세기를 다 0으로 설정. 램버트 코사인법칙을 검색해보세요 벡터의 내적도 쓰여요.
   왜 코사인을 쓸까? 내눈(표면)에 수직으로 오는 빛은 각도가 0이라고 약속한다. 즉 후레쉬를 정면으로 눈에 비추는게 젤 눈뽕이된다. 코사인 0도가 1이므로 이게 젤 높은 수치의 비율을 뜻하고 빛이 가장 밝은 설정이된다.
   반면 내눈에서 후레쉬를 수직으로 두면 제일 눈이 안부시다. 이때 코사인90도는 0 이므로 해당 빛이 젤 어둡다는 설정이된다.

 - 3D 모델링은 모든 표면이 빛을 100퍼센트로 받는다고 가정하고 그림을 그려요.

=========================================================================================================================================================================

? Level의 AddObject가 오브젝트의 레이어까지 연결하는거였나

 - RenderMgr에 벡터로 2D광원을 멤버로 가지게 됩니다.
 - finalTick에 광원을 설정? 

 - RenderMgr의 Tick()에서 render() 하기 전에 광원정보를 꺼내 써야합니다. 따라서 리소스를 바인딩하고 클리어하는 함수를 만듭니다.
   (UpdateData(), Clear()함수를 렌더매니저에 추가하고, render() 호출 이전에 사용됨)

 - UpdateData() 에서는 광원을 구조화버퍼로 옳긴다.
   clear() 에서는 다음 프레임에 이용될 새로운 광원 정보를 받기 전에 광원 데이터를 싹 정리한다. 

 - HLSL에 tLIghtInfo랑 이름 똑같은 구조체 하나 만들어서 레지스터 바인딩된 버퍼를 활용합니다.
   StructuredBuffer<tLightInfo> g_Light2D : register(t11) 등등

 - 픽셀쉐이더에 마지막 색깔 return vColor 이전에 광원처리를 할겁니다.
  - 원래 내가 출력하려는 최종컬러의 RGB에 Ambient의 RGB 값을 곱해줍니다.
    Ambient의 RGB 값이 크면 클수록 텍스처의 색깔이 더 선명하게 보입니다. 만약 Ambient에 특정 색깔만 수치가 높으면 그 색깔이 더 선명해집니다. 
    예를들어 엠비언트의 RGB 값이 0.1 0.1 0.1 보다는 0.3 0.3 0.3 이 더 밝을 것이고 0.8 0.3 0.3 은 텍스처가 더 붉게 보이게 됩니다.

 - 지금은 방향성 광원만 처리했는데 다른 타입의 광원도 처리해야합니다.
   또 광원이 여러개일때는 어떻게 할지도 고민해야함




   