 - <각 파티클의 최종위치는 어떻게 결정되는가>
   
   세번째 노이즈 텍스처를 써서 거기의 색깔 값을 추출하면 그 색생의 RGB가 랜덤값이 될 수 있다.
   즉 텍스처노이즈 위치값(UV)에 접근해서 거기에 해당하는 한 픽셀에 랜덤값 3개를 추출할 수 있겠다는 말. 
   vRand[0]은 파티클의 중심위치에서 떨어진 거리(== 지금 구를 하고 있으므로 원의 반지름)
   vRnad[1]은 중심위치와 파티클 사이의 각도
   그래서 최종 파티클의 위치는 
   CenterPos + float3(cos(RandomAngle), sin(RandomAngle), 0.f) * RandomRadius
   파티클 컴포넌트(파티클 오브젝트. 즉 모든 파티클효과의 집합체)의 위치(Centerpos)에 지금 렌더링할 파티클효과의 로컬좌표를 더한다는뜻.
   풀어서 설명하면 로컬위치 (xy값이 각도에기반한 삼각함수를 써서 0~1사이값)에 크기(원의 반지름)를 곱하고, 월드좌표계로 이동.

 - 파티클에 월드포츠말고 로컬포즈도 멤버로 추가. 이제 월드 로컬 위치 둘다가졌음
   이렇게 해야 좌표계가 달라져도 대처할수있음. 

 - 사각형은 vRand[0]에 박스스케일 x 전체 너비를 곱하고 그 너비의 반만큼 뺸다 <- ?
            vRand[1]에            y

 - 여기까지 하고 화면에 출력해보면 일정한 패턴이 계속 일정하게 나옴. 프로그램 몇번 껐다 켜도 그럼 이유는 어차피 
   텍스처맨위 픽셀들에서 RGB값을 추출해서 랜덤값으로 쓰기 때문에 결과로 나오는 패턴이 동일해 보임 이제 삼각함수 써서 추출할 노이즈텍스처의 위치를 더 복잡하게 하자.
   x값은 그냥 UV값에 DT타임을 0.2정도 곱한 값으로 수정해주고
   y값은 

 - <파티클 크기를 랜덤하게 설정하는 수식>
   파티클의 크기를 결정할때는 vRand[2]를 쓴다. 그 값은 0~1사이의 B(블루) 값이다.
   모듈에서 설정한 수명 최대값에 최소값을 뺀것은 바로 그 최대값과 최소값 사이의 범위에 해당하는 값이다.
   여기에 0~1사이의 값을 곱한다는 것은 최대최소값의 범위내 에서 랜덤값을 뽑아내는 수식이다.
   마지막으로 최소값을 더해주면 최소범위보다 적은 값은 안나오는걸 보장하면서, 앞서 계산한 값을 더해도 최대값보단 크지않게된다.

 - <파티클 등장하는거 까지 했고 이제 생기고 이동하는 구조추가> 
  struct.h에 파티클의 속도 타입을 설정하는 맴버를 추가하자. 
  이것도 모듈이다 벨로시티모듈. 만약 파티클 움직임이 필요없다면 이 모듈을 비활성화될것이다.
  - AddVelocityType 속도타입
    0번은 중심으로부터 뻗어나가는 이동
    1번은 어느 중심으로 모여지는 이동
    2번은 특정 고정방향으로만 간다
  - FixedDirection은 속도타입이 2번일때 쓰는 지정방향
 
  예시)  분수같은건 fix direction을 위로 설정하고, 거기서 범위 각도를 한 45도 주면 위로 솟구치게 된다. 여기에 중력적용하면 위로 솟구치다가 떨어짐. 크기값도 조절하면 생동감새김

=============================================================================================================

  particle_update.fx파일에서 Module.arrModuleChect[3] 이 벨로시티모듈 활성화를 확인하는 값이다.
  
  - clamp(인자, 최소 , 최대)함수는 최소 최대 사이의 값을 인자로 준 비율을 적용한 값으로 만환해주는 함수. 이때 인자는 랜덤값을 주면 의도한 수치 범위내의 랜덤값이 나올것임
    그 인자에 vRand[2]를 쓰는 상황임


 - 지금까지 만든 파티클의 위치는 로컬스페이스방식임. 월드스페이스 방식의 파티클은 어떻게 구현해야할까
  - 로컬스페이스의 값을 더하지 말고 월드스페이스 위치값만 두면된다. 속력값도 월드스페이스 기준으로 더한다 <- 확인필요


 - 밸로시티모드가 1(멀리서 중앙으로오는 파티클) 이라면 0일때와 다르게 방향만 반전(마이너스부호붙이기) 하면된다.
   이때 중앙에서 너무 가까이 생성된 파티클은 오히려 중앙을 빨리 지나쳐서 중앙에서 뻗어나가는 효과가 되버릴 수 있다. 이걸 막으려면 중앙에 가까워진 파티클은 안그리는 코드를 적어주던지 해야함


 - 파티클 이미지는 무채색이여야 내가 지정한 파티클 색상으로 파티클 이미지가 나온다.
   

 - 스파크 텍스처는 속도에 따른 회전정렬을 해줘야 한다 우벡터로 회전을 해서 렌더링




 


 
